<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>King   James</title>
  
  <subtitle>筚路蓝缕，以启山林</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://github.com/"/>
  <updated>2018-04-13T14:09:53.864Z</updated>
  <id>http://github.com/</id>
  
  <author>
    <name>Mr.Yi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo + GitHub Pages 搭建个人博客</title>
    <link href="http://github.com/2018/04/13/Hexo%20+%20GitHub%20Pages%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://github.com/2018/04/13/Hexo + GitHub Pages 搭建个人博客/</id>
    <published>2018-04-13T14:08:49.000Z</published>
    <updated>2018-04-13T14:09:53.864Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.</p><footer><strong>Documentation</strong><cite><a href="https://hexo.io/docs/index.html" target="_blank" rel="external">hexo.io</a></cite></footer></blockquote><p>这一篇 note 讲解如何使用 <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> + <a href="https://pages.github.com/" target="_blank" rel="external">Github Pages</a> 搭建个人博客，并用 GitHub 进行版本控制。其中源文件位于 hexo 分支，静态文件位于 master 分支。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li><p>安装最新版的 <a href="https://git-scm.com/" target="_blank" rel="external">Git</a>。在命令行输入 <code>git version</code> 检查 git 是否安装成功。</p></li><li><p>安装 LTS 版的 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>。同样在命令行输入 <code>node -v</code> 和 <code>npm -v</code>以检查 node.js 是否安装成功。</p></li><li><p>注册 GitHub 账号，新建一个 repository，一般命名为 <code>username.github.io</code>，这样 GitHub 会自动开启 GitHub Pages 功能。勾选 <code>Initialize this repository with a README</code> 的话即可访问个人主页，否则需要添加内容才能访问，建议暂时不要勾选。</p></li><li><p>GitHub 添加 SSH（推荐），可参考 <a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="external">Connecting to GitHub with SSH</a>。</p></li></ul><a id="more"></a><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-<span class="keyword">cli</span> -g</div></pre></td></tr></table></figure><p>使用 <code>hexo version</code> 检查是否安装成功。</p><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>选择一个目录，比如 D:\github，键入以下命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init username<span class="selector-class">.github</span><span class="selector-class">.io</span></div><div class="line">cd username<span class="selector-class">.github</span><span class="selector-class">.io</span></div><div class="line">npm install</div></pre></td></tr></table></figure><p>这样就创建了一个名为 <code>username.github.io</code> 的 Hexo 工程（文件夹）。注意，<code>hexo init &lt;folder&gt;</code> 命令要求 folder 为空文件夹，否则会报错。</p><h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo<span class="built_in"> server </span> (简写为 hexo s)</div></pre></td></tr></table></figure><p>默认情况下，访问网址为 <code>http://localhost:4000/</code>。打开网址，可以看到一篇 landscape 主题的 Hello World 博客。一般修改 Markdown 文件，不需要重启服务器，直接刷新浏览器即可，除非你修改配置文件。</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><h4 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h4><p>工程根目录下的 <strong>_config.yml</strong> 称为站点配置文件，可以配置一些个人信息等，具体可参考<a href="https://hexo.io/docs/configuration.html" target="_blank" rel="external">Configuration</a>。</p><h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><p>每个主题的目录下也会有一个 <strong>_config.yml</strong> 文件，称为主题配置文件。Hexo 有丰富多彩的主题，这里以 <a href="https://github.com/iTimeTraveler/hexo-theme-hiker">hexo-theme-hiker</a> 为例，说明如何更换主题。</p><p>安装主题：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd username<span class="selector-class">.github</span><span class="selector-class">.io</span></div><div class="line">git clone git@github<span class="selector-class">.com</span>:iTimeTraveler/hexo-theme-hiker<span class="selector-class">.git</span> themes/hiker</div></pre></td></tr></table></figure><p>PS：这样安装主题并不能 push 到 GitHub 中去，可使用 <code>fork + subtree</code> 的方法解决，具体参考 <a href="http://w4lle.com/2016/06/06/Hexo-themes/" target="_blank" rel="external">Hexo 主题同步</a>。感谢 <a href="https://github.com/tyrionyu">@Tyrion Yu</a> 的帮助。</p><p>修改站点配置文件，将 theme 修改为 hiker：</p><pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hiker</code></pre><p>重启服务器，即可查看效果。在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，可能需要 clean 一下。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo <span class="keyword">server</span></div></pre></td></tr></table></figure><p>PS：如果不需要 landscape 主题，直接删除 themes 下的对应文件夹即可。</p><h4 id="部署配置"><a href="#部署配置" class="headerlink" title="部署配置"></a>部署配置</h4><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></div></pre></td></tr></table></figure><p>然后修改站点配置文件：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:username/username.github.io.git  # 这种配置需使用 SSH  branch: master  message: message  # 默认为 Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}</code></pre><p>其中 branch 为静态文件所在的分支，<a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="external">必须为 master 分支</a>。message 表示自定义提交信息，一般不需要配置，删除该行即可。</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="Git-初始化"><a href="#Git-初始化" class="headerlink" title="Git 初始化"></a>Git 初始化</h4><p>为工程创建 Git 仓库：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd username<span class="selector-class">.github</span><span class="selector-class">.io</span></div><div class="line">git init</div></pre></td></tr></table></figure><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><p>此时 Git 仓库为空，不能直接运行 <code>git branch hexo</code> 来创建新的分支，可通过以下命令创建：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -<span class="selector-tag">b</span> hexo</div></pre></td></tr></table></figure><h4 id="push-源文件"><a href="#push-源文件" class="headerlink" title="push 源文件"></a>push 源文件</h4><p>添加所有文件，提交到本地仓库：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line"><span class="bash">git commit -m <span class="string">"first commit"</span></span></div></pre></td></tr></table></figure><p>添加远程仓库，并push：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github<span class="selector-class">.com</span>:username<span class="selector-class">.github</span><span class="selector-class">.io</span><span class="selector-class">.git</span></div><div class="line">git push -u origin hexo</div></pre></td></tr></table></figure><h4 id="部署静态文件"><a href="#部署静态文件" class="headerlink" title="部署静态文件"></a>部署静态文件</h4><p>先生成静态文件，再部署：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo <span class="keyword">generate</span>  （简写为 hexo g）</div><div class="line">hexo delpoy  (简写为 hexo d)</div></pre></td></tr></table></figure><p>此时整个部署过程就结束啦，你可以通过 <code>https://username.github.io/</code> 访问自己的 Github Pages。</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><p><a href="https://gist.github.com/btfak/18938572f5df000ebe06fbd1872e4e39" target="_blank" rel="external">How to use Hexo and deploy to GitHub Pages</a></p></li><li><p><a href="https://hexo.io/docs/" target="_blank" rel="external">Hexo Documentation</a></p></li><li><p><a href="https://www.zhihu.com/question/21193762" target="_blank" rel="external">知乎：使用hexo，如果换了电脑怎么更新博客？</a></p></li><li><p><a href="https://github.com/iTimeTraveler/hexo-theme-hiker">An attractive theme for Hexo. called “Hiker”, short for “HikerNews”</a></p></li><li><p><a href="http://w4lle.com/2016/06/06/Hexo-themes/" target="_blank" rel="external">Hexo 主题同步</a></p></li><li><p><a href="https://aoxuis.me/bo-ke/2013-08-06-git-subtree" target="_blank" rel="external">使用 git subtree 集成项目到子目录</a></p></li><li><p><a href="https://www.atlassian.com/blog/git/alternatives-to-git-submodule-git-subtree" target="_blank" rel="external">Git subtree: the alternative to Git submodule</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://hexo.io/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo.io&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;这一篇 note 讲解如何使用 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt; + &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github Pages&lt;/a&gt; 搭建个人博客，并用 GitHub 进行版本控制。其中源文件位于 hexo 分支，静态文件位于 master 分支。&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装最新版的 &lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;。在命令行输入 &lt;code&gt;git version&lt;/code&gt; 检查 git 是否安装成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装 LTS 版的 &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;。同样在命令行输入 &lt;code&gt;node -v&lt;/code&gt; 和 &lt;code&gt;npm -v&lt;/code&gt;以检查 node.js 是否安装成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注册 GitHub 账号，新建一个 repository，一般命名为 &lt;code&gt;username.github.io&lt;/code&gt;，这样 GitHub 会自动开启 GitHub Pages 功能。勾选 &lt;code&gt;Initialize this repository with a README&lt;/code&gt; 的话即可访问个人主页，否则需要添加内容才能访问，建议暂时不要勾选。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GitHub 添加 SSH（推荐），可参考 &lt;a href=&quot;https://help.github.com/articles/connecting-to-github-with-ssh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Connecting to GitHub with SSH&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="blog" scheme="http://github.com/categories/blog/"/>
    
    
      <category term="Git笔记" scheme="http://github.com/tags/Git%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git--命令(二)</title>
    <link href="http://github.com/2018/04/13/Git--%E5%91%BD%E4%BB%A4(%E4%BA%8C)/"/>
    <id>http://github.com/2018/04/13/Git--命令(二)/</id>
    <published>2018-04-13T14:04:29.000Z</published>
    <updated>2018-04-13T14:06:01.044Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p><footer><strong>Documentation</strong><cite><a href="https://git-scm.com/" target="_blank" rel="external">git-scm.com</a></cite></footer></blockquote><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。它是由 Linux 之父 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。本文介绍了 Git 的常用命令。</p><h2 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h2><p>在学习 Git 命令之前，首先要理解它的三种状态：已提交（committed）、已修改（modified）和已暂存（staged）。已提交表示数据已经安全的保存在本地数据库中；已修改表示修改了文件，但还没保存到数据库中，增加、删除文件也相当于已修改；已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</p><p>由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。</p><p><img src="https://git-scm.com/book/en/v2/images/areas.png" alt="Working tree, staging area, and Git directory"></p><a id="more"></a><p>它们之间的关系可以参考 <a href="http://www.runoob.com/git/git-workspace-index-repo.html" target="_blank" rel="external">Git 工作区、暂存区和版本库</a>。</p><p>在阅读下面的内容之前，最好在自己的电脑上<a href="https://git-scm.com/" target="_blank" rel="external">安装 Git</a>，然后按照顺序操作。如果你想先感受一下 Git 的魅力， <a href="https://try.github.io/" target="_blank" rel="external">Try Git</a> 是一个不错的选择。</p><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><p>安装完 Git，初次运行前需要做一些配置，比如用户信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"Your Name"</span></div><div class="line">git config --global user.email email@example.com</div></pre></td></tr></table></figure><p>Windows 环境下，推荐使用文本编辑器 <a href="https://notepad-plus-plus.org/" target="_blank" rel="external">Notepad++</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 注意更改为自己的安装目录</span></div><div class="line">git config --global core.editor <span class="string">"'C:\Program Files\Notepad++\notepad++.exe' -multiInst -nosession"</span></div></pre></td></tr></table></figure><p>配置完成后，可以通过 <code>git config --list</code> 查看所有的配置信息，或者使用 <code>git config user.name</code> 查看单个信息。</p><p>另外，还可以自定义配置一些命令的别名，方便记忆。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global alias.last <span class="string">'log -1'</span></div></pre></td></tr></table></figure><p>这样 <code>git last</code> 就相当于 <code>git log -1</code>，用于查看最后一次的提交记录。我比较喜欢这样配置，用于查看提交历史：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global alias.lg <span class="string">"log --oneline --decorate --graph --all"</span></div></pre></td></tr></table></figure><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>创建版本库有两种方式，一种是使用 <code>git clone</code> 从现有 Git 仓库中拷贝项目，格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> &lt;repo&gt; &lt;directory&gt;</div></pre></td></tr></table></figure><p>另一种是通过 <code>git init</code> 初始化一个 Git 仓库，省略 directory 会在当前文件夹中创建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init &lt;directory&gt;</div></pre></td></tr></table></figure><p>例如，在 <code>D:\test</code> 文件夹下执行 <code>git init</code> 命令，这样会生成一个 <strong>隐藏</strong> 的 .git 目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">Initialized empty Git repository <span class="keyword">in</span> D:/<span class="built_in">test</span>/.git/</div></pre></td></tr></table></figure><h2 id="Git-工作流程"><a href="#Git-工作流程" class="headerlink" title="Git 工作流程"></a>Git 工作流程</h2><p>基本的 Git 工作流程如下：</p><ol><li><p>在工作目录中修改文件。</p></li><li><p>暂存文件，将文件的快照放入暂存区域。</p></li><li><p>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</p></li></ol><p>使用 Git 时文件的生命周期如下：</p><p><img src="https://git-scm.com/book/en/v2/images/lifecycle.png" alt="The lifecycle of the status of your files"></p><p>上图来源于 <a href="https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository" target="_blank" rel="external">Pro Git</a>，这里的 <code>Add the file</code> 应该理解为使用 <code>git add</code> 命令，<code>Reomve the file</code> 则是手动删除文件。</p><h3 id="First-Commit"><a href="#First-Commit" class="headerlink" title="First Commit"></a>First Commit</h3><p>在 <code>D:\test</code> 中手动添加 <code>a.txt</code> 文件，使用 Notepad++ 编辑（<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013743256916071d599b3aed534aaab22a0db6c4e07fd0000" target="_blank" rel="external">不要用记事本</a>），然后运行 <code>git status</code> 命令，查看当前状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line"></div><div class="line">No commits yet</div><div class="line"></div><div class="line">Untracked files:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</div><div class="line"></div><div class="line">        a.txt</div><div class="line"></div><div class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</div></pre></td></tr></table></figure><p>Git 的提示十分人性化，可以看出 <code>a.txt</code> 处于 <code>Untracked</code> 状态。执行 <code>git add</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git add a.txt</div><div class="line"></div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line"></div><div class="line">No commits yet</div><div class="line"></div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">        new file:   a.txt</div></pre></td></tr></table></figure><p>此时 <code>a.txt</code> 处于 <code>Staged</code> 状态，可以通过 <code>git rm --cached &lt;file&gt;...</code> 使其回到 <code>Untracked</code> 状态。最后执行 <code>git commit</code> 命令，进行第一次提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"Add a.txt"</span></div><div class="line">[master (root-commit) 3fbc25c] Add a.txt</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line"> create mode 100644 a.txt</div></pre></td></tr></table></figure><p>其中 <code>-m</code> 是参数，后面跟着提交信息。如果配置了文本编辑器，执行不带参数的 <code>git commit</code> 后，可在弹出的编辑器中填写提交信息。注意只有 <strong>保存文件</strong> 并 <strong>退出编辑器</strong>，commit 才会生效。</p><p>另外，在只 <strong>修改文件</strong> 时，使用 <code>-a</code> 可以跳过 <code>Staged</code> 状态直接提交，可以和 <code>-m</code> 一起使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -am <span class="string">"Update file"</span></div></pre></td></tr></table></figure><h3 id="Second-Commit"><a href="#Second-Commit" class="headerlink" title="Second Commit"></a>Second Commit</h3><p>添加 <code>b.txt</code>，然后修改 <code>a.txt</code>，查看此时的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</div><div class="line"></div><div class="line">        modified:   a.txt</div><div class="line"></div><div class="line">Untracked files:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</div><div class="line"></div><div class="line">        b.txt</div><div class="line"></div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure><p>此时 <code>a.txt</code> 处于 <code>Modified</code> 状态，可通过 <code>git checkout -- &lt;file&gt;...</code> 放弃更改，但是要 <strong>慎用</strong>，这些更改是找不回来的。 而 <code>b.txt</code> 处于 <code>Untracked</code> 状态。</p><p><code>git diff</code> 命令用于比较工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。</p><p><code>git diff --cached</code>（Git 1.6.1 及更高版本还允许使用 <code>git diff --staged</code>，效果是相同的，但更好记些）可以查看已暂存的将要添加到下次提交里的内容。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git diff</div><div class="line">diff <span class="comment">--git a/a.txt b/a.txt</span></div><div class="line">index <span class="number">69</span>dd9b9..b0c1f18 <span class="number">100644</span></div><div class="line"><span class="comment">--- a/a.txt</span></div><div class="line">+++ b/<span class="keyword">a</span>.txt</div><div class="line">@@ <span class="number">-1</span> +<span class="number">1</span>,<span class="number">2</span> @@</div><div class="line"> aaaaaaaaaa    <span class="comment"># a.txt 原本的内容</span></div><div class="line">+AAAAAAAAAA    <span class="comment"># a.txt 添加的内容</span></div><div class="line">$ git diff <span class="comment">--staged # nothing</span></div></pre></td></tr></table></figure><p>添加这两个文件到暂存区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git add <span class="string">"*.txt"</span> <span class="comment"># git add .(一个点，表示添加所有文件)</span></div><div class="line"></div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">        modified:   a.txt</div><div class="line">        new file:   b.txt</div></pre></td></tr></table></figure><p>同理，<code>git reset HEAD &lt;file&gt;...</code> 命令可使文件回到 add 之前的状态。此时再次执行 diff：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ git diff <span class="comment"># nothing</span></div><div class="line"></div><div class="line">$ git diff --staged</div><div class="line">diff --git a/a.txt b/a.txt</div><div class="line">index 69dd9b9..b0c1f18 100644</div><div class="line">--- a/a.txt</div><div class="line">+++ b/a.txt</div><div class="line">@@ -1 +1,2 @@</div><div class="line"> aaaaaaaaaa</div><div class="line">+AAAAAAAAAA</div><div class="line">diff --git a/b.txt b/b.txt</div><div class="line">new file mode 100644</div><div class="line">index 0000000..817e5ca</div><div class="line">--- /dev/null</div><div class="line">+++ b/b.txt</div><div class="line">@@ -0,0 +1 @@</div><div class="line">+bbbbbbbbbb <span class="comment"># b.txt 中添加的内容</span></div></pre></td></tr></table></figure><p>以上对比可以看出不同 diff 的差别。执行 commit 命令进行第二次提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"Update a.txt and add b.txt"</span></div><div class="line">[master 24e0903] Update a.txt and add b.txt</div><div class="line"> 2 files changed, 2 insertions(+)</div><div class="line"> create mode 100644 b.txt</div></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>为了演示删除操作，先添加 <code>c.txt</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git add c.txt</div><div class="line"></div><div class="line">$ git commit -m <span class="string">"Add c.txt"</span></div><div class="line">[master 9d8751a] Add c.txt</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line"> create mode 100644 c.txt</div></pre></td></tr></table></figure><p>手动删除后的状态为 <code>Untracked</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add/rm &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</div><div class="line"></div><div class="line">        deleted:    c.txt</div><div class="line"></div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure><p>使用 <code>git checkout -- &lt;file&gt;...</code> 撤销，然后执行 <code>git rm</code> 命令，此时的状态为 <code>Staged</code>。这就是两者的差别吧。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git rm c.txt</div><div class="line">rm <span class="string">'c.txt'</span></div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">        deleted:    c.txt</div></pre></td></tr></table></figure><p>提交删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">"Delete c.txt"</span></div><div class="line">[master 95d6e7e] Delete c.txt</div><div class="line"> 1 file changed, 1 deletion(-)</div><div class="line"> delete mode 100644 c.txt</div></pre></td></tr></table></figure><p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除 <code>git rm -f &lt;file&gt;</code>。 这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复。</p><p>而 <code>git rm --cached</code> 命令只会将文件从 Git 仓库中删除，但仍然保留在当前工作目录中。当你忘记添加 <code>.gitignore</code> 文件，不小心把一个很大的日志文件或一堆无关的文件添加到暂存区时，这一做法尤其有用。</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>在 Git 中，用 HEAD 表示当前版本，上一个版本就是 <code>HEAD^</code>（<code>HEAD~</code>）。有关 <code>~</code> 和 <code>^</code> 的区别，请参考 <a href="https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git" target="_blank" rel="external">What’s the difference between HEAD^ and HEAD~ in Git?</a></p><p>注意，Windows 环境下 <code>^</code> 识别不了，必须加 <strong>双引号</strong> 才行，像这样 <code>&quot;HEAD^&quot;</code>。</p><p>假如又要用到 <code>c.txt</code>，想反悔，怎么办？Git 允许我们在版本的历史之间穿梭，使用 <code>git reset --hard &lt;commit_id&gt;</code> 命令。如果不知道 commit_id，<code>git log</code> 可以查看提交历史。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ git lg <span class="comment"># 自定义的 git log</span></div><div class="line">* 95d6e7e (HEAD -&gt; master) Delete c.txt</div><div class="line">* 9d8751a Add c.txt</div><div class="line">* 24e0903 Update a.txt and add b.txt</div><div class="line">* 3fbc25c Add a.txt</div><div class="line"></div><div class="line">$ git reset --hard HEAD~</div><div class="line">HEAD is now at 9d8751a Add c.txt</div><div class="line"></div><div class="line">$ git lg</div><div class="line">* 9d8751a (HEAD -&gt; master) Add c.txt</div><div class="line">* 24e0903 Update a.txt and add b.txt</div><div class="line">* 3fbc25c Add a.txt</div></pre></td></tr></table></figure><p>其中 <code>3fbc25c</code> 为版本号（commit_id），它是一个由 SHA-1 计算出来的校验和，用十六进制表示，而且每次都不一样。因为我使用了自定义的 <code>git lg</code>， 这里只显示 7 位，其实它是 <code>3fbc25c7d58e06169a45b587a9c6164234efd43c</code>。</p><p><code>git log</code> 功能十分强大，可参考 <a href="https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History" target="_blank" rel="external">Git Basics - Viewing the Commit History</a>。</p><p>另外，可以使用命令 <code>git reflog</code> 查看命令历史。如果想回到 <code>Delete c.txt</code> 的版本，直接 reset 对应的 commit_id 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div><div class="line">9d8751a (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD~</div><div class="line">95d6e7e HEAD@&#123;1&#125;: commit: Delete c.txt</div><div class="line">9d8751a HEAD@&#123;2&#125;: commit: Add c.txt</div><div class="line">24e0903 HEAD@&#123;3&#125;: commit: Update a.txt and add b.txt</div><div class="line">3fbc25c HEAD@&#123;4&#125;: commit (initial): Add a.txt</div></pre></td></tr></table></figure><h3 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h3><p>其实 reset 分三类，分别为 <code>--soft</code>、<code>--mixed</code>（默认，可不加）和 <code>--hard</code>，它们之间到底有什么区别呢？我们做个试验。注意此时是 <code>Add c.txt</code> 的版本。</p><h4 id="soft"><a href="#soft" class="headerlink" title="soft"></a>soft</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git reset --soft HEAD~</div><div class="line"></div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">        new file:   c.txt</div></pre></td></tr></table></figure><p><code>--soft</code> 参数使文件回到了 <code>Staged</code> 的状态。</p><h4 id="mixed"><a href="#mixed" class="headerlink" title="mixed"></a>mixed</h4><p>重新回到 <code>Add c.txt</code> 的版本，执行 <code>--mixed</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git reset --mixed HEAD~</div><div class="line"></div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Untracked files:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</div><div class="line"></div><div class="line">        c.txt</div><div class="line"></div><div class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</div></pre></td></tr></table></figure><p><code>--mixed</code> 参数使文件回到了 <code>Untracked</code> 状态。</p><h4 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h4><p>重新回到 <code>Add c.txt</code> 的版本，执行 <code>--hard</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard HEAD~</div><div class="line">HEAD is now at 24e0903 Update a.txt and add b.txt</div><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">nothing to commit, working tree clean</div></pre></td></tr></table></figure><p>而 <code>--hard</code> 参数直接回到了上一个版本。</p><p>想要了解更多关于 Reset 的知识，请参考 <a href="https://git-scm.com/book/en/v2/Git-Tools-Reset-Demystified" target="_blank" rel="external">Git Tools - Reset Demystified</a>。</p><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。<br>有人把 Git 的分支模型称为它的“必杀技特性”，也正因为这一特性，使得 Git 从众多版本控制系统中脱颖而出。为何 Git 的分支模型如此出众呢？Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。</p><p>下面演示了 Git 分支的工作流程。创建并切换到 dev 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git branch dev</div><div class="line"></div><div class="line">$ git checkout dev</div><div class="line">Switched to branch <span class="string">'dev'</span></div></pre></td></tr></table></figure><p>简单地，这两个命令可以合并为一个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev</div><div class="line">Switched to a new branch <span class="string">'dev'</span></div></pre></td></tr></table></figure><p>在 dev 分支添加 <code>d.txt</code>，修改 <code>c.txt</code>，提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line"></div><div class="line">$ git commit -m <span class="string">"Add d.txt and update c.txt"</span></div><div class="line">[dev 7f5d2b1] Add d.txt and update c.txt</div><div class="line"> 2 files changed, 2 insertions(+), 1 deletion(-)</div><div class="line"> create mode 100644 d.txt</div></pre></td></tr></table></figure><p>切换到 master 分支，合并 dev 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line"></div><div class="line">$ git merge dev</div><div class="line">Updating 9d8751a..7f5d2b1</div><div class="line">Fast-forward</div><div class="line"> c.txt | 2 +-</div><div class="line"> d.txt | 1 +</div><div class="line"> 2 files changed, 2 insertions(+), 1 deletion(-)</div><div class="line"> create mode 100644 d.txt</div></pre></td></tr></table></figure><p>最后删除 dev 分支：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">branch </span>-d dev</div><div class="line"><span class="symbol">Deleted</span> <span class="keyword">branch </span>dev (was <span class="number">7</span>f5d2b1).</div></pre></td></tr></table></figure><h2 id="Git-远程仓库"><a href="#Git-远程仓库" class="headerlink" title="Git 远程仓库"></a>Git 远程仓库</h2><p>为了能在任意 Git 项目上协作，需要知道如何管理自己的远程仓库。远程仓库是指托管在因特网或其他网络中的你的项目的版本库。 你可以有好几个远程仓库，通常有些仓库对你只读，有些则可以读写。与他人协作涉及管理远程仓库以及根据需要推送或拉取数据。</p><p>这里以 GitHub 为例，演示如何使用远程仓库。在 GitHub 上创建一个新的 Repository，不要添加任何内容，完成后如下图所示：</p><p><img src="github.png" alt="GitHub"></p><p>添加远程仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:muwednesday/git-learning.git</div></pre></td></tr></table></figure><p>使用命令 <code>git push</code> 将本地仓库推送到 GitHub，其中 <code>-u</code> 为设置当前本地分支的默认远程分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div><div class="line">Counting objects: 14, <span class="keyword">done</span>.</div><div class="line">Delta compression using up to 8 threads.</div><div class="line">Compressing objects: 100% (7/7), <span class="keyword">done</span>.</div><div class="line">Writing objects: 100% (14/14), 913 bytes | 304.00 KiB/s, <span class="keyword">done</span>.</div><div class="line">Total 14 (delta 2), reused 0 (delta 0)</div><div class="line">remote: Resolving deltas: 100% (2/2), <span class="keyword">done</span>.</div><div class="line">To github.com:muwednesday/git-learning.git</div><div class="line"> * [new branch]      master -&gt; master</div><div class="line">Branch <span class="string">'master'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'master'</span> from <span class="string">'origin'</span>.</div></pre></td></tr></table></figure><p>刷新页面后即可看到文件。然后在 GitHub 上创建一个 <code>README.md</code> 的文件，提交。</p><p>返回本地仓库，查看状态，这里居然显示 <code>up to date</code>。本来应该落后才对，为什么呢？原因参见 <a href="https://stackoverflow.com/questions/27828404/why-does-git-status-show-branch-is-up-to-date-when-changes-exist-upstream" target="_blank" rel="external">Why does git status show branch is up-to-date when changes exist upstream?</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Your branch is up to date with <span class="string">'origin/master'</span>.</div><div class="line"></div><div class="line">nothing to commit, working tree clean</div></pre></td></tr></table></figure><p>最后使用命令 <code>git pull</code> 来自动的抓取然后合并远程分支到当前分支。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git pull</div><div class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">3</span>, done.</div><div class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">2</span>/<span class="number">2</span>), done.</div><div class="line"><span class="string">remote:</span> Total <span class="number">3</span> (delta <span class="number">1</span>), reused <span class="number">0</span> (delta <span class="number">0</span>), pack-reused <span class="number">0</span></div><div class="line">Unpacking <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</div><div class="line">From github.<span class="string">com:</span>muwednesday/git-learning</div><div class="line">   <span class="number">7</span>f5d2b1..ad27849  master     -&gt; origin/master</div><div class="line">Updating <span class="number">7</span>f5d2b1..ad27849</div><div class="line">Fast-forward</div><div class="line"> README.md | <span class="number">1</span> +</div><div class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</div><div class="line"> create mode <span class="number">100644</span> README.md</div></pre></td></tr></table></figure><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><p><a href="https://git-scm.com/book/en/v2" target="_blank" rel="external">Pro Git</a></p></li><li><p><a href="https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf" target="_blank" rel="external">GitHub Cheat Sheet</a></p></li><li><p><a href="https://git-scm.com/doc" target="_blank" rel="external">Reference Manual</a></p></li><li><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的 Git 教程</a></p></li><li><p><a href="https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git" target="_blank" rel="external">What’s the difference between HEAD^ and HEAD~ in Git?</a></p></li><li><p><a href="https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting" target="_blank" rel="external">Reset, Checkout, and Revert</a></p></li><li><p><a href="https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch" target="_blank" rel="external">What is the difference between ‘git pull’ and ‘git fetch’?</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git-scm.com&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。它是由 Linux 之父 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。本文介绍了 Git 的常用命令。&lt;/p&gt;
&lt;h2 id=&quot;三种状态&quot;&gt;&lt;a href=&quot;#三种状态&quot; class=&quot;headerlink&quot; title=&quot;三种状态&quot;&gt;&lt;/a&gt;三种状态&lt;/h2&gt;&lt;p&gt;在学习 Git 命令之前，首先要理解它的三种状态：已提交（committed）、已修改（modified）和已暂存（staged）。已提交表示数据已经安全的保存在本地数据库中；已修改表示修改了文件，但还没保存到数据库中，增加、删除文件也相当于已修改；已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。&lt;/p&gt;
&lt;p&gt;由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://git-scm.com/book/en/v2/images/areas.png&quot; alt=&quot;Working tree, staging area, and Git directory&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://github.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://github.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>hiker博客主题配置</title>
    <link href="http://github.com/2018/04/13/hiker%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>http://github.com/2018/04/13/hiker博客主题配置/</id>
    <published>2018-04-13T02:01:03.000Z</published>
    <updated>2018-04-13T04:34:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hiker"><a href="#Hiker" class="headerlink" title="Hiker"></a>Hiker</h1><p>An attractive, exquisite theme for <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>. named “Hiker”, short for “HikerNews”.  </p><p><a href="https://itimetraveler.github.io/hexo-theme-hiker/" target="_blank" rel="external"><strong>☞ 在线预览</strong></a>  |  <a href="https://gitter.im/hexo-theme-hiker/Lobby?utm_source=share-link&amp;utm_medium=link&amp;utm_campaign=share-link" target="_blank" rel="external"><strong>Hiker问题交流群</strong></a><br><img src="https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png" alt="Desktop Preview"><br><a id="more"></a><br><img src="https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/article-chrome.png" alt="Post Preview"><br><img src="https://github.com/iTimeTraveler/hexo-theme-hiker/blob/master/source/preview/preview-mobile.png?raw=true" alt="Mobile Preview"></p><!--more--><p>以上Demo站点的源文件在这里，大家有需要的可以参考：<a href="https://github.com/iTimeTraveler/hexo-theme-hiero/tree/site-source">https://github.com/iTimeTraveler/hexo-theme-hiero/tree/site-source</a></p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>从GitHub上获取代码</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/iTimeTraveler/hexo-theme-hiker.git themes/hiker</span></div></pre></td></tr></table></figure><ol><li><p>启用</p><p>把Hexo主目录下的 <code>_config.yml</code> 文件中的字段 <code>theme</code> 修改为 <code>hiker</code>.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> Extensions</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Plugins: http://hexo.io/plugins/</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Themes: http://hexo.io/themes/</span></span></div><div class="line">theme: hiker</div></pre></td></tr></table></figure></li><li><p>更新</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> themes/Hiker</span></div><div class="line"><span class="meta">$</span><span class="bash"> git pull</span></div></pre></td></tr></table></figure><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="自定义首页背景"><a href="#自定义首页背景" class="headerlink" title="自定义首页背景"></a>自定义首页背景</h3><p>您可以将选择的大图放到 <code>YOUR_HEXO_SITE\themes\hiker\source\css\images</code> 文件夹下. 然后更改 hiker/_config.yml文件里的<code>home_background_image</code>字段.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Homepage</span></div><div class="line"><span class="comment"># eg. home_background_image: [css/images/home-bg.jpg, http://t.cn/RMbvEza]</span></div><div class="line"><span class="comment"># eg. mode: image | polyline | trianglify</span></div><div class="line"><span class="attr">home_background_image:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  mode:</span> <span class="string">image</span></div><div class="line"><span class="attr">  rolling:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  url:</span> <span class="string">[css/images/home-bg.jpg,</span> <span class="string">css/images/sample.jpg,</span> <span class="attr">https://source.unsplash.com/collection/954550/1920x1080]</span></div></pre></td></tr></table></figure><p>首页背景填充方式有三种可选mode：</p><ul><li><code>image</code>: 大图模式</li><li><code>trianglify</code>: 多边形渐变背景</li><li><code>polyline</code>: 随机彩色折线</li></ul><p>默认配置为<code>image</code>模式，也就是大图模式。多边形渐变背景<code>trianglify</code>模式来自<a href="https://github.com/qrohlf/trianglify">Trianglify</a>大致如下图：</p><p><img src="https://cloud.githubusercontent.com/assets/347189/6771063/f8b0af46-d090-11e4-8d4c-6c7ef5bd9d37.png" alt=""></p><p>如果你不中意以上两种背景填充方式，可以选择随机彩色折线<code>polyline</code>模式，长相参考下图。</p><blockquote><p>！！注意：如果在使用<code>image</code>模式时<code>url</code>为空（<code>enable</code>仍然保持true）, 主题也会自动使用下面这种<strong><code>漂亮的随机线条</code> </strong>填充（也就是会自动退化为<code>polyline</code>模式）：</p></blockquote><p><img src="https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/home-no-background1.png" alt=""></p><h3 id="Code-色彩主题"><a href="#Code-色彩主题" class="headerlink" title="Code 色彩主题"></a>Code 色彩主题</h3><p>Hiker 使用<a href="https://github.com/chriskempson/tomorrow-theme">Tomorrow Theme</a> 作为代码高亮的配色. 总共有六种选择: <code>default</code>, <code>normal</code>, <code>night</code>, <code>night blue</code>, <code>night bright</code>, <code>night eighties</code></p><p><img src="https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/code-theme-default.png" alt="code `default` theme Preview"></p><p>默认高亮配色如上图。 另外的五种配色如下.</p><p><img src="https://github.com/iTimeTraveler/hexo-theme-hiker/blob/master/source/preview/code-theme.jpg?raw=true" alt="code themes"></p><p>Modify <code>highlight_theme</code> in hiker/_config.yml.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Code Highlight theme</span></div><div class="line"><span class="comment"># Available value:</span></div><div class="line"><span class="comment">#    default | normal | night | night eighties | night blue | night bright</span></div><div class="line"><span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></div><div class="line"><span class="attr">highlight_theme:</span> <span class="string">default</span></div></pre></td></tr></table></figure><h3 id="博客主题色"><a href="#博客主题色" class="headerlink" title="博客主题色"></a>博客主题色</h3><p>Hiker 为你的博客提供了五种可选的主题色，可以配置成<code>random</code>, 每次生成博客时会自动随机使用一个主题色.</p><p><img src="https://github.com/iTimeTraveler/hexo-theme-hiker/blob/master/source/preview/theme-color.png?raw=true" alt="theme colors"></p><ul><li><span style="display: inline-block; width: 18px; height: 18px; margin: 0 4px; background-color: #fb6d19; border-radius: 3px; vertical-align: middle;"></span> orange</li><li><span style="display: inline-block; width: 18px; height: 18px; margin: 0 4px; background-color: #00aced; border-radius: 3px; vertical-align: middle;"></span> blue</li><li><span style="display: inline-block; width: 18px; height: 18px; margin: 0 4px; background-color: #f03838; border-radius: 3px; vertical-align: middle;"></span> red</li><li><span style="display: inline-block; width: 18px; height: 18px; margin: 0 4px; background-color: #39aa56; border-radius: 3px; vertical-align: middle;"></span> green</li><li><span style="display: inline-block; width: 18px; height: 18px; margin: 0 4px; background-color: #404040; border-radius: 3px; vertical-align: middle;"></span> black</li></ul><p>You can modify <code>theme_color</code> in hiker/_config.yml.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Article theme color</span></div><div class="line"><span class="comment"># Available value:</span></div><div class="line"><span class="comment">#    random | orange | blue | red | green | black</span></div><div class="line"><span class="attr">theme_color:</span> <span class="string">random</span></div></pre></td></tr></table></figure><h3 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h3><p>只有在文章阅读页面，点击左上角的logo图片，就能打开设置对话框，操作如下图</p><p><img src="https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/night-mode.gif" alt=""></p><h3 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h3><p>Hiker 使用 <code>Insight Search</code> 实现了站内搜索，在_config.yml文件中启用如下.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Search</span></div><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">    insight:</span> <span class="literal">true</span> <span class="comment"># you need to install `hexo-generator-json-content` before using Insight Search</span></div><div class="line"><span class="attr">    swiftype:</span> <span class="comment"># enter swiftype install key here</span></div><div class="line"><span class="attr">    baidu:</span> <span class="literal">false</span> <span class="comment"># you need to disable other search engines to use Baidu search, options: true, false</span></div></pre></td></tr></table></figure><blockquote><p><strong>！注意</strong>: 在使用搜索功能前必须在Hexo目录下使用以下命令安装 <code>hexo-generator-json-content</code> 插件.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -S hexo-generator-json-content</div></pre></td></tr></table></figure><h3 id="Fancybox"><a href="#Fancybox" class="headerlink" title="Fancybox"></a>Fancybox</h3><p>Hiker使用<a href="http://fancyapps.com/fancybox/" target="_blank" rel="external">Fancybox</a>来浏览展示您文章中的图片，支持以下方式在文章中添加图片：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">![<span class="string">img caption</span>](<span class="link">img url</span>)</div><div class="line"></div><div class="line">&#123;% fancybox img<span class="emphasis">_url [img_</span>thumbnail] [img_caption] %&#125;</div></pre></td></tr></table></figure><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><p><code>sidebar</code>（侧边栏位置）可以设置为 <code>left</code> , <code>right</code>, <code>bottom</code>.</p><p>Hiker 有以下5种侧边栏插件:</p><ul><li>category</li><li>tag</li><li>tagcloud</li><li>archives</li><li>recent_posts</li></ul><p>All of them are enabled by default. You can edit them in <code>widget</code> setting.</p><h3 id="打赏捐赠按钮"><a href="#打赏捐赠按钮" class="headerlink" title="打赏捐赠按钮"></a>打赏捐赠按钮</h3><p><img src="https://github.com/iTimeTraveler/hexo-theme-hiker/blob/master/source/preview/donation-btn.png" alt=""></p><p>每篇文章最后显示打赏按钮，目前仅支持微信支付和支付宝两种打赏方式。您可以在文件 <code>hiker/_config.yml</code> 中配置您的微信、支付宝付款二维码图片的URL:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># donation button</span></div><div class="line"><span class="attr">donate:</span></div><div class="line"><span class="attr">    enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">    message:</span> <span class="string">'如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作!'</span></div><div class="line"><span class="attr">    wechatImage:</span> <span class="attr">https://your_WECHAT_PAY_ImageUrl</span></div><div class="line"><span class="attr">    alipayImage:</span> <span class="attr">https://your_ALIPAY_ImageUrl</span></div></pre></td></tr></table></figure><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>已完全支持原生Disqus、livere（来必力）、wumii（无觅）评论系统。因多说、网易云跟帖均已停止服务，在国内建议大家使用相对稳定的来必力评论系统。在文件 <code>hiker/_config.yml</code> 中修改以下代码片段:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># comment ShortName, you can choose only ONE to display.</span></div><div class="line"><span class="attr">gentie_productKey:</span> <span class="comment">#网易云跟帖your-gentie-product-key</span></div><div class="line"><span class="attr">duoshuo_shortname:</span></div><div class="line"><span class="attr">disqus_shortname:</span></div><div class="line"><span class="attr">livere_shortname:</span> <span class="string">MTAyMC8yOTQ4MS82MDQ5</span></div><div class="line"><span class="attr">uyan_uid:</span></div><div class="line"><span class="attr">wumii:</span></div></pre></td></tr></table></figure><ul><li><h4 id="网易云跟帖说明（已停止服务）"><a href="#网易云跟帖说明（已停止服务）" class="headerlink" title="网易云跟帖说明（已停止服务）"></a>网易云跟帖说明（已停止服务）</h4></li></ul><p>登陆 <a href="https://gentie.163.com/" target="_blank" rel="external">网易云跟帖</a> 获取你的 Product Key。请注意，您在<strong><code>云跟帖管理后台设置的域名必须跟您站点的域名一致</code></strong>。在本地测试时，需要做两步骤前置设定：</p><ol><li>修改 hosts 文件，将您域名的请求指向本地。例如：127.0.0.1 yoursite.com</li><li>修改 Hexo 监听的端口为 80：<code>hexo s --debug -p 80</code></li></ol><p>测试完成后请将 hosts 文件中的域名映射删除即可。</p><h2 id="支持的浏览器"><a href="#支持的浏览器" class="headerlink" title="支持的浏览器"></a>支持的浏览器</h2><p><img src="https://github.com/iTimeTraveler/hexo-theme-hiker/blob/master/source/preview/browser-support.png?raw=true" alt=""></p><h2 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h2><p>欢迎大家有各种问题和改进建议的，直接提issue或者评论，或者pull request都行。我会尽量抽时间和大家交流。刚接触Hexo不久，疏忽不足之处，还望大家海涵！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hiker&quot;&gt;&lt;a href=&quot;#Hiker&quot; class=&quot;headerlink&quot; title=&quot;Hiker&quot;&gt;&lt;/a&gt;Hiker&lt;/h1&gt;&lt;p&gt;An attractive, exquisite theme for &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;. named “Hiker”, short for “HikerNews”.  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://itimetraveler.github.io/hexo-theme-hiker/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;☞ 在线预览&lt;/strong&gt;&lt;/a&gt;  |  &lt;a href=&quot;https://gitter.im/hexo-theme-hiker/Lobby?utm_source=share-link&amp;amp;utm_medium=link&amp;amp;utm_campaign=share-link&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Hiker问题交流群&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://itimetraveler.github.io/hexo-theme-hiker/2016/10/24/Hiker%E4%B8%BB%E9%A2%98%E9%A2%84%E8%A7%88/homepage-index.png&quot; alt=&quot;Desktop Preview&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://github.com/categories/blog/"/>
    
    
      <category term="blog config" scheme="http://github.com/tags/blog-config/"/>
    
  </entry>
  
  <entry>
    <title>背包问题</title>
    <link href="http://github.com/2018/04/13/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>http://github.com/2018/04/13/背包问题/</id>
    <published>2018-04-12T16:57:50.000Z</published>
    <updated>2018-04-13T07:38:39.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0/1背包问题"></a>0/1背包问题</h1><blockquote><p>有N件物品和一个容量为V的背包。放入第i件物品耗费的空间是Ci，得到的价值是Wi。求解将哪些物品装入背包可使价值总和最大？</p></blockquote><p>  将每一件物品从1到n编号，从第1件物品开始，每一件物品就只有两个状态：放进背包了 / 没有放进背包。</p><p>  我们画一张表格，行对应着每一件物品，列对应着背包的重量，那么pack[i][j]就表示  <strong>前i件物品，背包最大承重j</strong> 这个子问题的解。</p><a id="more"></a><p> 给一组数据作为样例：</p><pre><code>5 106 23 25 64 56 4</code></pre><p>  第一行表示有5件物品，10为最大承重，2-6行为5个物品的价值和重量。</p><p><strong>生成以下的表格</strong></p><pre><code>0    6    6    6    6     6     6     6     6     60    6    6    9    9     9     9     9     9     90    6    6    9    9     9     9    11    11    140    6    6    9    9     9    10    11    13    140    6    6    9    9    12    12    15    15    15</code></pre><p>　所以最终的结果是最后一行最后一列的 <strong>15</strong></p><p><strong>给出代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/* 01 package problem */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> pack[<span class="number">100</span>][<span class="number">1000</span>];</div><div class="line"><span class="keyword">int</span> c[<span class="number">100</span>],w[<span class="number">100</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line"><span class="built_in">memset</span>(pack,<span class="number">0</span>,<span class="keyword">sizeof</span>(pack));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = w[i]; j &lt;= r; j++)</div><div class="line">            pack[i][j] = max(pack[i - <span class="number">1</span>][j - c[i]] + w[i], pack[i - <span class="number">1</span>][j]);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;pack[n][r];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> t,n,V;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">    <span class="keyword">while</span>(t--)&#123; <span class="comment">//多组数据</span></div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;V;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">            <span class="built_in">cin</span>&gt;&gt;c[i]&gt;&gt;w[i];</div><div class="line">        make(n,V);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>代码优化</strong></p><p>这个代码在时间上应该已经不能再优化了，但是还可以考虑空间复杂度的优化。</p><p><strong>优化的基本思路：</strong></p><p>考虑所用到的状态转移方程: <code>pack[i][j] = max(pack[i-1][j-c[i]] + w[i], pack[i-1][j]);</code> 可以发现 <code>pack[i][j]</code> 的值并不和整个二维表的每一个数字的值都有关，而是仅仅和上面一行的值有关，所以可以使用 <code>pack[2][n]</code> 这么大的数组来存储结果。</p><p>考虑状态转移方程的实际情况，还可以使用<strong>一维数组</strong>来进行运算，但是要注意的是，此时，循环应该从后往前进行。因为如果是按从前往后的顺序，那么 <code>pack[i][j] = max(pack[i][j-c[i]] + w[i] , pack[i][j]);</code> 中进行比较的两个值 <code>pack[i][j]</code> 是没有更新的，也就是 <code>pack[i-1][j]</code> 的值，而 <code>pack[i][j - c[i]]</code>一定是前面被更新过的，也就是 <code>pack[i][j-w[i]]</code> 的值。这就是说，<code>max()</code> 比较的两个数是属于原来二维数组中不同的两行，而不是我们期望的相同的两行。</p><p>如果上面的说法不能理解我们不妨这样：有一件物品的性价比很高，在pack数组的某个位置，我们第一次将这个物品放入背包中，但是按照从前往后的顺序，很可能在这个位置的后面某个位置我们会<strong><em>再次</em></strong>将这个物品添加进去。</p><p><strong>优化后的代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> pack[<span class="number">10000</span>],c[<span class="number">1000</span>],w[<span class="number">1000</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">    <span class="built_in">memset</span>(pack,<span class="number">0</span>,<span class="keyword">sizeof</span>(pack));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = r; j &gt;= w[i]; j--)</div><div class="line">            pack[j] = max(pack[j], pack[j - c[i]] + w[i]);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;pack[r]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n,t,V;</div><div class="line">    <span class="built_in">cin</span>&gt;&gt;t;</div><div class="line">    <span class="keyword">while</span>(t--)&#123;</div><div class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;V;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span>&gt;&gt;c[i]&gt;&gt;w[i];</div><div class="line">        make(n,V);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>初始化问题：</strong></p><blockquote><ul><li><p>如果限定背包必须装满，那么需要将数组初始化为 -∞ （负无穷大）</p></li><li><p>如果背包可以不装满，那么数组初始化为0</p></li></ul></blockquote><p><em>为了后面的书写方便，我们把代码改成这样</em><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZeroOnePack</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> w)</span></span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = V; i &gt;= c; i--)</div><div class="line">pack[i] = max(pack[i], pack[i - c] + w);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><em>这样01背包问题的主要代码就是这样：</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">ZeroOnePack(c[i],w[i]);</div></pre></td></tr></table></figure><p>这样ZeroOnePack()这个函数就专门解决了<strong>“放一个物品”</strong>的问题</p><h1 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h1><blockquote><p>完全背包问题和0/1背包问题几乎一模一样，不同的就是物品不再是一个，而是无数个</p></blockquote><p><strong>思路</strong></p><p>完全背包不同处是原来的一个物品变成了无数个，但是我们还是可以把它变成0/1背包问题的，试想一下，即使拥有无数个物品，但是真的可以用无数个吗？</p><p>不可能，因为背包的容量有限，所以每个物品c,w<strong>最多可以使用[V/c]个</strong>，所以以下面的数据为例：</p><pre><code>c:    3    2    5    4w:    7    4    2    5V = 10</code></pre><p>我们完全可以把这组数据改成这样：</p><pre><code>c:    3    3    3    2    2    2    2    2    5    5    4    4w:    7    7    7    4    4    4    4    4    2    2    5    5</code></pre><p>原因自然是背包容量最大为10,所以占用空间为3的物品最多放3个，修改过后的数据就可以用0/1背包的方法处理</p><p>那难道完全背包需要重开一个c2[],w2[]，然后按0/1背包处理吗？</p><p>当然不是，还记得我们将0/1背包进行优化时说的如果循环从前向后进行会发生什么后果吗？</p><p>这一句 <strong>“但是按照从前往后的顺序，很可能在这个位置的后面某个位置我们会再次将这个物品添加进去。”</strong></p><p>看到了？0/1背包时为了避免重复，我们将循环改为从后往前，但是完全背包是可以重复使用物品的，对吧？所以代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CompletePack</span><span class="params">(c,w)</span></span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = c; i &lt;= V; i++)</div><div class="line">pack[i] = max(pack[i],pack[i - c] + w )</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>怎么样，和0/1背包只有一点点的差别对不对？</p><h1 id="3-多重背包问题"><a href="#3-多重背包问题" class="headerlink" title="3.多重背包问题"></a>3.多重背包问题</h1><blockquote><p>多重背包和0/1背包不同的地方就是物品不是一个而是有m个</p></blockquote><p>所以我们还是就一个物品c,w,m分析：</p><p>对于m可能有两种情况：</p><ol><li><code>m &gt;= [V/c]</code>，这种情况明显是完全背包</li><li><code>0 &lt; m &lt; [v/c]</code>，对于这种情况需要认真分析一下</li></ol><p>我们仍然需要按照0/1背包的思路把这些物品拆开，而且我们要保证我们拆出来的这些物品可以通过组合表示出1到m任意件物。</p><p>我们可以考虑二进制的计数方法，这样我们把物品拆成<code>(c,w) , (2c,2w) , (4c,4w) …… [(m-2^k)*c , (m-2^k)*w)]</code></p><p>不管最优解会在这件物品中取几件，我们都可以用我们拆出来的这些物品来表示（请自己证明，二进制的思想）</p><p>所以，有了思路，代码就简单了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MultiplePack</span><span class="params">(c,w,m)</span></span>&#123;</div><div class="line"><span class="keyword">if</span> (c * m &gt;= V) &#123;</div><div class="line">CompletePack(c,w);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">k = <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (k &lt; m) &#123;</div><div class="line">ZeroOnePack(c*k,w*k);</div><div class="line">m = m - k;</div><div class="line">k = <span class="number">2</span> * k;</div><div class="line">&#125;</div><div class="line">ZeroOnePack(c * m, w * m);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong><em>其实就是0/1背包和完全背包的组合，有木有？</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-1背包问题&quot;&gt;&lt;a href=&quot;#0-1背包问题&quot; class=&quot;headerlink&quot; title=&quot;0/1背包问题&quot;&gt;&lt;/a&gt;0/1背包问题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;有N件物品和一个容量为V的背包。放入第i件物品耗费的空间是Ci，得到的价值是Wi。求解将哪些物品装入背包可使价值总和最大？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  将每一件物品从1到n编号，从第1件物品开始，每一件物品就只有两个状态：放进背包了 / 没有放进背包。&lt;/p&gt;
&lt;p&gt;  我们画一张表格，行对应着每一件物品，列对应着背包的重量，那么pack[i][j]就表示  &lt;strong&gt;前i件物品，背包最大承重j&lt;/strong&gt; 这个子问题的解。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://github.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="背包问题" scheme="http://github.com/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
      <category term="算法" scheme="http://github.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C/C+" scheme="http://github.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Markdown文档中mathjax的问题</title>
    <link href="http://github.com/2018/04/12/markdown%E6%96%87%E6%A1%A3%E4%B8%ADmathjax%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://github.com/2018/04/12/markdown文档中mathjax的问题/</id>
    <published>2018-04-12T14:35:54.000Z</published>
    <updated>2018-04-12T15:08:49.644Z</updated>
    
    <content type="html"><![CDATA[<p>在写markdown文档时经常会需要插入数学公式，我之前只会使用图片插入，上次在看到mathjax后，我开始了使用mathjax的历程，但在实际写文档的过程中遇到了一些问题。</p><a id="more"></a><h1 id="关于有一些公式无法正确的显示"><a href="#关于有一些公式无法正确的显示" class="headerlink" title="关于有一些公式无法正确的显示"></a>关于有一些公式无法正确的显示</h1><p>在写机器学习的文章中遇到的一个关于范数的公式写出来编辑器上显示没有问题，但是一旦放进文档里就不行了，这个问题困扰了我很长时间。</p><p>这是代码：<br><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; 严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义</div><div class="line">&gt; <span class="formula">$$ <span class="tag">\<span class="name">lim</span></span>_&#123;k<span class="tag">\<span class="name">to</span></span><span class="tag">\<span class="name">infty</span></span>&#125;<span class="tag">\<span class="name">left</span></span>( <span class="tag">\<span class="name">sum</span></span>_&#123;i=1&#125;^n<span class="tag">\<span class="name">mid</span></span> p_i-q_i<span class="tag">\<span class="name">mid</span></span> ^k<span class="tag">\<span class="name">right</span></span>)^<span class="tag">\<span class="name">frac</span><span class="string">&#123;1&#125;</span><span class="string">&#123;k&#125;</span></span> $$</span></div></pre></td></tr></table></figure></p><p>这是效果：</p><blockquote><p>严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义<br>$$ \lim<em>{k\to\infty}\left( \sum</em>{i=1}^n\mid p_i-q_i\mid ^k\right)^\frac{1}{k} $$</p></blockquote><p>这里haroopad显示的公式是正确的，但是hexo编译过后的网页显示就不对了。</p><p>把代码剪裁一下，看看什么样子的公式是可以的：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; 严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义</div><div class="line">&gt; $$ <span class="symbol">\l</span>im_&#123;k<span class="symbol">\t</span>o<span class="symbol">\i</span>nfty&#125;<span class="symbol">\l</span>eft( <span class="symbol">\s</span>um_i <span class="symbol">\r</span>ight) $$</div></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p>严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义<br>$$ \lim_{k\to\infty}\left( \sum_i \right) $$</p></blockquote><p>这个好像就可以，但是貌似sum后面的i一旦加上花括号就不行：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; 严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义</div><div class="line">&gt; $$ <span class="symbol">\l</span>im_&#123;k<span class="symbol">\t</span>o<span class="symbol">\i</span>nfty&#125;<span class="symbol">\l</span>eft( <span class="symbol">\s</span>um_&#123;i&#125; <span class="symbol">\r</span>ight) $$</div></pre></td></tr></table></figure></p><p>效果：</p><blockquote><p>严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义<br>$$ \lim<em>{k\to\infty}\left( \sum</em>{i} \right) $$</p></blockquote><p>于是我点开了两个网页的源代码，定位到这一行：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义<span class="tag">&lt;<span class="name">br</span>&gt;</span>$$ \lim<span class="tag">&lt;<span class="name">em</span>&gt;</span>&#123;k\to\infty&#125;\left( \sum<span class="tag">&lt;/<span class="name">em</span>&gt;</span>&#123;i&#125; \right) $$<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义<span class="tag">&lt;<span class="name">br</span>&gt;</span>$$ \lim_&#123;k\to\infty&#125;\left( \sum_i \right) $$<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p>可以发现最明显的不同就算lim后面的 <code>&lt;em&gt;</code>，这时我们注意到，hexo在编译的时候将lim和sum后面的下划线 _翻译成强调的 <code>&lt;em&gt;</code> 了，仔细观察前面的公式，确实可以发现一部分变成了斜体。所以我们要在所有的下划线 _ 前面加上 \ 转义就可以了。</p><p><strong>OK，搞定</strong></p><p><strong><em> p.s 我的chrome上显示的公式后面都有一个竖线，firefox没有，内啥，一般平时用chrome习惯，所以有人知道怎么弄咩？ </em></strong></p><p><strong><em> 上面的问题在重新配置Hexo之后就没有了，个人觉得应该是版本的问题？ </em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写markdown文档时经常会需要插入数学公式，我之前只会使用图片插入，上次在看到mathjax后，我开始了使用mathjax的历程，但在实际写文档的过程中遇到了一些问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://github.com/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="http://github.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Convolutional Neural Networks / Week 3</title>
    <link href="http://github.com/2018/04/12/Convolutional-Neural-Networks-Week-3/"/>
    <id>http://github.com/2018/04/12/Convolutional-Neural-Networks-Week-3/</id>
    <published>2018-04-12T09:09:44.000Z</published>
    <updated>2018-04-12T14:57:16.915Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Object-Localization"><a href="#Object-Localization" class="headerlink" title="Object Localization"></a>Object Localization</h3><p>Object localization用来识别图像中是否包含特定对象以及该对象的位置，并最终使用一个矩形框在图像中标出该特定对象。为了简化问题，在这里我们假设图片中最多包含一个待识别的对象。下面对问题进行形式化描述。</p><p>定义目标变量$y$ (同时也是神经网络的输出层)，<br>$$<br>y = [P_c~b_x~b_y~b_h~b_w~C_1~C_2~C_3]^T<br>\tag{1}<br>$$<br><a id="more"></a></p><p>其中，$P_c$表示图像中是否包含特定对象，$(b_x, b_y)$表示特定对象的中心位置在图像中的坐标（图像左上角坐标为$(0,0)$，右下角坐标为$(1,1)$），$b_h,b_w$分别表示特定对象的高度和宽度，$C_1-C_3$表示特定对象的类型（行人，汽车，摩托车）。</p><p>定义损失函数$\mathcal{L(\hat{y}, y)}$，<br>$$<br>\mathcal{L}(\hat{y}, y) =<br>\begin{split}<br>\begin{cases}<br>\sum_{i=1}^{i=8} (\hat{y}_i - y_i)^2,&amp;~if~y_1=1 \\<br>(\hat{y}_1 - y_1)^2,&amp;~if~y_1=0<br>\end{cases}<br>\end{split}<br>$$<br>这里针对不同的维度都使用了平方差损失函数，可以针对不同的维度使用不同的损失函数。</p><h3 id="Landmark-Detection"><a href="#Landmark-Detection" class="headerlink" title="Landmark Detection"></a>Landmark Detection</h3><p>有时我们需要识别图中的一些关键点的坐标，这些坐标称为Landmarks。这时候，我们可以定义如下的目标变量$y$<br>$$<br>y = [P~l_{x1}~l_{y1}~\dots~l_{xn}~l_{yn}]^T<br>$$<br>以识别人面部眼角嘴角为例，其中$P$代表是否包含人脸，$(l_{xi}, l_{yi})$代表关键点的坐标。</p><h3 id="Object-Detection"><a href="#Object-Detection" class="headerlink" title="Object Detection"></a>Object Detection</h3><p> Object Detction的其中一种办法叫做Sliding windows detection，采用不同尺寸的矩形框，从左至右、从上到下遍历枚举图像的子图，判断子图中是否包含需要的目标对象。很明显，这种办法比较笨，需要消耗大量的计算量。</p><h3 id="Convolutional-Implementation-of-Sliding-Windows"><a href="#Convolutional-Implementation-of-Sliding-Windows" class="headerlink" title="Convolutional Implementation of Sliding Windows"></a>Convolutional Implementation of Sliding Windows</h3><p>全连接是可以通过卷积来实现的，并且两者直接是等价的。例如，如果$5\times 5 \times 16$的卷积层之后接的是一个$400$个神经元的全连接层，那么它等价于$5 \times 5 \times 16$的卷积层之后采用400个$5 \times 5 \times 16$的filters得到的$1 \times 1 \times 400$的卷积层。</p><p>得益于卷积的存在，Sliding windows detection可以做到同时预测同一张图像不同子图中是否包含特定对象。但是这样做的不利条件是预测出来的对象的边界（bounding box）会相对不准确。因为这种办法采用的是子图的边界来作为待预测对象的边界。</p><h3 id="Bounding-Box-Predictions"><a href="#Bounding-Box-Predictions" class="headerlink" title="Bounding Box Predictions"></a>Bounding Box Predictions</h3><p>这里介绍了YOLO algorithm (You Only Look Once)，该算法用来识别同一张图像上的多个目标简单。它将图像切分为了$M \times N$的网格并在此基础上构造了卷积神经网络。该网络的输入依然为整张图片，切分并不影响输入，而是决定了网络的输出尺寸为$M \times N \times 8$。这样，每个子图就拥有了一个$1 \times 1 \times 8$的预测结果，用来表示图像中是否包含特定的对象，如果包含的话，该特定对象的中心位置、长宽以及类别分别是什么。</p><p>该算法利用了卷积操作提高了对同一张图像上不同子图的模型训练预测的效率，使得一次训练就可以完成对多个子图的建模（这里有个假设，就是每个子图上只包含最多一个特定对象）。</p><h3 id="Intersection-Over-Union"><a href="#Intersection-Over-Union" class="headerlink" title="Intersection Over Union"></a>Intersection Over Union</h3><p>$$<br>Intersection over Union (loU) = \frac{size~of~intersection}{size~of~union}<br>$$</p><p>通过loU，我们可以知道两个矩形在大小和位置上的相像程度。这样，我们就可以用它来评价object detection算法的优劣。</p><h3 id="Non-max-Suppression"><a href="#Non-max-Suppression" class="headerlink" title="Non-max Suppression"></a>Non-max Suppression</h3><p>有时候，我们的算法会将相同的对象识别多次，non-max suppression算法用来解决这个问题。举例，</p><p>假设卷积神经网络最后的输出为$19 \times 19 \times 5$，也就是说图像被切分为了$19 \times 19$的子图，每个子图的预测结果为一个5维的向量，该向量如下，<br>$$<br>y = [p_c~b_x~b_y~b_h~b_w]^T<br>$$<br>那么，在训练结束之后，non-max suppression算法会执行如下步骤，</p><ol><li>扔掉所有$p_c \le 0.6$的bounding boxes</li><li>取出剩余bounding boxes中$p_c$最大的那个bounding box，作为新检测到的目标</li><li>删除剩余所有与该box的loU值$\ge 0.5$的bounding boxes</li><li>重复(2-3)步，直到没有bounding boxes剩余</li></ol><p>从上可以看出，non-max suppression其实是个简单的贪心算法。</p><h3 id="Anchor-Boxes"><a href="#Anchor-Boxes" class="headerlink" title="Anchor Boxes"></a>Anchor Boxes</h3><p>在Object detection问题中，还有一个难点就是图像划分出网格后，每个网格中只能最多识别一个对象。为了让单个网格识别多个对象，可以采用Anchor boxes方法。</p><p>Anchor boxes方法的思想很简单，将式(1)改为如下形式，<br>$$<br>y = [P_c~b_x~b_y~b_h~b_w~C_1~C_2~C_3~P_c~b_x~b_y~b_h~b_w~C_1~C_2~C_3]^T<br>\tag{2}<br>$$<br>式(2)表示在识别的过程中采用了两个Anchor box。每个Anchor box都负责识别所有类别的对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Object-Localization&quot;&gt;&lt;a href=&quot;#Object-Localization&quot; class=&quot;headerlink&quot; title=&quot;Object Localization&quot;&gt;&lt;/a&gt;Object Localization&lt;/h3&gt;&lt;p&gt;Object localization用来识别图像中是否包含特定对象以及该对象的位置，并最终使用一个矩形框在图像中标出该特定对象。为了简化问题，在这里我们假设图片中最多包含一个待识别的对象。下面对问题进行形式化描述。&lt;/p&gt;
&lt;p&gt;定义目标变量$y$ (同时也是神经网络的输出层)，&lt;br&gt;$$&lt;br&gt;y = [P_c~b_x~b_y~b_h~b_w~C_1~C_2~C_3]^T&lt;br&gt;\tag{1}&lt;br&gt;$$&lt;br&gt;
    
    </summary>
    
      <category term="deep-learning" scheme="http://github.com/categories/deep-learning/"/>
    
    
  </entry>
  
  <entry>
    <title>Convolutional Neural Networks / Week 2</title>
    <link href="http://github.com/2018/04/12/Convolutional-Neural-Networks-Week-2/"/>
    <id>http://github.com/2018/04/12/Convolutional-Neural-Networks-Week-2/</id>
    <published>2018-04-12T09:09:44.000Z</published>
    <updated>2018-04-12T13:57:00.925Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Classic-Networks"><a href="#Classic-Networks" class="headerlink" title="Classic Networks"></a>Classic Networks</h3><p>LeNet-5的网络结构如下，</p><p><img src="https://raw.githubusercontent.com/HouJP/my-hexo/master/source/img/cnn-w2/lenet-5.jpeg" width="80%" align="center"></p><a id="more"></a><p>AlexNet的网络结构如下，</p><p><img src="https://raw.githubusercontent.com/HouJP/my-hexo/master/source/img/cnn-w2/alexnet.jpeg" width="80%" align="center"></p><p>VGG-16的网络结构如下，</p><p><img src="https://raw.githubusercontent.com/HouJP/my-hexo/master/source/img/cnn-w2/vgg-16.jpeg" width="80%" align="center"></p><h3 id="ResNets"><a href="#ResNets" class="headerlink" title="ResNets"></a>ResNets</h3><p>在一般的神经网络中，两层神经网络的数学表达如下，<br>$$<br>\begin{split}<br>&amp; z^{[l+1]} = W^{[l+1]}a^{[l]} + b^{[l+1]} \\<br>&amp; a^{[l+1]} = g(z^{[l+1]}) \\<br>&amp; z^{[l+2]} = W^{[l+2]}a^{[l + 1]} + b^{[l+2]} \\<br>&amp; a^{[l+2]} = g(z^{[l+2]})<br>\end{split}<br>$$<br>而在ResNets中，修改了$a^{[l+2]}$的生成方式，变成了，<br>$$<br>a^{[l+2]} = g(z^{[l + 2]} + a^{[l]})<br>\tag{1}<br>$$<br>这样的两层神经网络称为Residual block，将这样的Residual block串联起来就构成了ResNets。</p><p>ResNets解决了传统神经网络中存在的层数不能过深的问题。在传统的神经网络中，随着深度的增加，训练误差会先降后升，而对于ResNets，随着网络层数达到一百甚至一千层，训练误差也可以平缓的下降（也可能出现收敛的现象）。</p><h3 id="Why-ResNets-Work"><a href="#Why-ResNets-Work" class="headerlink" title="Why ResNets Work"></a>Why ResNets Work</h3><p>首先来解释一下为什么在传统的网络后面加一个Residual block不会降低原有网络的性能，<br>$$<br>\begin{split}<br>a^{[l+2]} &amp;= g(z^{[l + 2]} + a^{[l]}) \\<br>    &amp;= g((w^{[l+2]}a^{[l + 1]} + b^{[l + 2]}) + a^{[l]})<br>\end{split}<br>$$<br>假设我们采用的激活函数为RELU，同时$w^{[l+2]}$和$b^{[l+2]}$为0，那么，<br>$$<br>a^{[l+2]} = g(a^{[l]}) = a^{[l]}<br>$$<br>所以由于Residual block的存在，网络在第$l+2$层的时候，很容易退回到$l$层去。这样可以达到一个效果，在最差情况下，后边加上的Residual block仿佛不存在一样，这样就不会影响原先的效果。</p><p>Residual block中还有一点值得注意，对于式(1)来说，$z^{[l+2]}$和$a^{[l]}$的维度需要一致，那如果出现维度不一致的情况怎么办呢？增加一个$W_s$矩阵，<br>$$<br>a^{[l+2]} = g(z^{[l + 2]} + W_s a^{[l]})<br>$$<br>$W_s$有两种方式生成，</p><ol><li>随机生成的参数矩阵，跟随其他参数一起训练学习。</li><li>$a^{[l]}$的基础上采用padding操作生成，比如补0。</li></ol><h3 id="Networks-in-Networks-and-1x1-Convolutions"><a href="#Networks-in-Networks-and-1x1-Convolutions" class="headerlink" title="Networks in Networks and 1x1 Convolutions"></a>Networks in Networks and 1x1 Convolutions</h3><p>1x1 Convolutons也称为Networks in networks，它是一个1x1的filters并使用了Relu非线性变换。</p><h3 id="Inception-Network-Motivation"><a href="#Inception-Network-Motivation" class="headerlink" title="Inception Network Motivation"></a>Inception Network Motivation</h3><p>在构造神经网络的时候，我们有时候会很困惑，用$1\times1$的卷积效果好，还是$f^{[l]}\times f^{[l]}$的卷积效果好，或者用Max-pooling效果会更好呢？Inception Network的思想是，那就把他们在同一层中都用一遍，这样就会得到若干tensor的输出，然后再把这些tensor在channel的纬度上拼在一起，组合一个大的tensor。最后，用数据去训练学习，决定这些filters的参数。</p><p>这样会有如下问题，</p><ol><li>如何让这些tensor在除了channel之外的其他维度上保持尺寸一致？</li><li>会不会造成计算量的显著增加？</li></ol><p>对于问题(1)其实很好解决，采用padding的方式就可以让这些tensor的$n_H$和$n_W$保持一致。</p><p>对于问题(2)可以通过在两层网络中间增加一层$1\times1$ filter来解决。下面详细描述原理。</p><p>假设我们有这样两层网络，</p><p><img src="https://raw.githubusercontent.com/HouJP/my-hexo/master/source/img/cnn-w2/inception-2-layer.jpeg" width="50%" title="图 1" align="center"></p><p>那么从左到右需要的乘法运算的数量为，<br>$$<br>(28 \times 28 \times 32) \times (5 \times 5 \times 192) \approx 120~million<br>$$<br>如果我们在图(1)两层网络中间加入一层使用了$1\times1$ filter的卷积层，如图(2)所示，</p><p><img src="https://raw.githubusercontent.com/HouJP/my-hexo/master/source/img/cnn-w2/inception-3-layer.jpeg" width="50%" title="图 2" align="center"></p><p>那么从左到右所需要的乘法运算的数量为，<br>$$<br>\begin{split}<br>&amp;1st~layer \rightarrow 2nd~layer：&amp;(28 \times 28 \times 16) \times (1 \times 1 \times 192) \approx 2.4~million \\<br>&amp;2nd~layer \rightarrow 3rd~layer：&amp;(28 \times 28 \times 32) \times (5 \times 5 \times 16) \approx 10~million<br>\end{split}<br>$$<br>也就是共需要$12.4~million$的乘法运算。从中可以看到，加入”bottleneck layer”之后，所需要的计算量减少为了原来的十分之一。</p><h3 id="Transfer-Learning"><a href="#Transfer-Learning" class="headerlink" title="Transfer Learning"></a>Transfer Learning</h3><p>当我们有一个比较小的训练数据集的时候，我们可以在别人训练好的模型的基础上来达到我们的目的：删除最后的softmax layers，保留之前的layers的模型结构和权重，并在之后增加我们自己的softmax layers。然后用较小的训练数据集来训练我们新增加的layers的参数。这样就可以用较少的数据来得到不错的预测效果。</p><p>其中，我们可以预先存储训练数据集中的样本经过之前的layers (删除原先的softmax layers)之后得到的activations，这样就不用在之后训练新的softmax layers参数的时候反复计算，从而节省计算量并提高效率。</p><p>随着我们拥有的训练数据的增加，我们可以保留较少层数的参数不发生改变，其余网络层以原先权重为初始参数，然后在新的训练数据集上进行训练调整。如果我们的训练数据足够大，那么原先所有层的参数都可以只作为初始参数，让它们在新的数据集上进行训练调整。</p><h3 id="Data-Augmentation"><a href="#Data-Augmentation" class="headerlink" title="Data Augmentation"></a>Data Augmentation</h3><p>通常在机器学习中，我们需要大量的训练数据，因此有一些常用的有效的增加数据集的方法，</p><ul><li>Mirroring: 镜像处理</li><li>Random Cropping: 随机图像裁剪</li><li>Rotation: 图像旋转</li><li>Shearing:</li><li>Local warping: 局部变形</li><li>Color Shifting: 在不同的颜色通道上增减一定的数值，例如$R+20, G-20, B+20$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Classic-Networks&quot;&gt;&lt;a href=&quot;#Classic-Networks&quot; class=&quot;headerlink&quot; title=&quot;Classic Networks&quot;&gt;&lt;/a&gt;Classic Networks&lt;/h3&gt;&lt;p&gt;LeNet-5的网络结构如下，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/HouJP/my-hexo/master/source/img/cnn-w2/lenet-5.jpeg&quot; width=&quot;80%&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="deep-learning" scheme="http://github.com/categories/deep-learning/"/>
    
    
  </entry>
  
  <entry>
    <title>Convolutional Neural Networks / Week 4</title>
    <link href="http://github.com/2018/04/12/Convolutional-Neural-Networks-Week-4/"/>
    <id>http://github.com/2018/04/12/Convolutional-Neural-Networks-Week-4/</id>
    <published>2018-04-12T09:09:44.000Z</published>
    <updated>2018-04-12T15:06:09.549Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-Face-Recognition"><a href="#What-is-Face-Recognition" class="headerlink" title="What is Face Recognition"></a>What is Face Recognition</h3><p>这里区分两个概念，<code>Face verification</code>和<code>Face recognition</code>，</p><ul><li>Verification<ul><li>输入：图像 + 名字/ID</li><li>输出：输入的图像上是否有名字/ID表示的那个人</li></ul></li><li>Recognition<ul><li>数据库中有$K$个人</li><li>输入：图像</li><li>输出：图像上有的数据库中的人的名字/ID</li></ul></li></ul><p>很明显，Recognition比Verification的难度要大得多。<br><a id="more"></a></p><h3 id="One-Shot-Learning"><a href="#One-Shot-Learning" class="headerlink" title="One Shot Learning"></a>One Shot Learning</h3><p>什么是One-shot learning，</p><blockquote><p>Learning from one example to recognize the person again.</p></blockquote><p>很多时候公司的数据库中只有一张员工的照片，那么我们在做人脸识别系统的时候怎么根据这一张照片来再次识别相同的人的影像？如果用传统的卷积神经网络来做的话，因为训练数据很小，所以通常效果并不理想。</p><p>在这种情况下，我们应该学习”similarity” function,<br>$$<br>d(img1, img2) = degree~of~difference~between~images<br>$$<br>然后可以根据Similarity function完成verification,<br>$$<br>\begin{split}<br>If~d(img1, img2) &amp;\le \tau~same\\<br>&amp;&gt; \tau~different<br>\end{split}<br>$$</p><h3 id="Siamese-Network"><a href="#Siamese-Network" class="headerlink" title="Siamese Network"></a>Siamese Network</h3><p>Parameters of NN define an encoding $f(x^{(i)})$</p><p>Learn parameters so that:</p><ul><li>If $x^{(i)}, x^{(j)}$ are the same person, $| f(x^{(i)}) - f(x^{(j)}) |^2$ is small</li><li>If $x^{(i)}, x^{(j)}$ are the different person, $| f(x^{(i)}) - f(x^{(j)}) |^2$ is large</li></ul><p>那么，该网络学习的目标函数应该怎么定义呢？</p><h3 id="Triple-Loss"><a href="#Triple-Loss" class="headerlink" title="Triple Loss"></a>Triple Loss</h3><p>在Triple loss中，基准人脸图像称为Anchor image，正样本为Positive image，负样本为Negative image，那么我们希望得到的是，<br>$$<br>|f(A) - f(P) | ^2 \le | f(A) - f(N) | ^2<br>$$<br>也就是，<br>$$<br>|f(A) - f(P) | ^2 - | f(A) - f(N) | ^2 \le 0<br>$$<br>这里有个问题，如果$f$始终预测0，那么上述条件始终满足。为了防止这种情况发生，所以需要增加一个超参$\alpha$，也称为margin，<br>$$<br>|f(A) - f(P) | ^2 - | f(A) - f(N) | ^2 + \alpha \le 0<br>$$<br>下面对Loss function进行形式化定义，给定3个图像 A, P, N，<br>$$<br>\mathcal{L}(A, P, N) = max(|f(A) - f(P)|^2 -|f(A) - f(N)|^2  + \alpha, 0)<br>$$<br>在整体样本上的损失为，<br>$$<br>J = \sum_{i=1}^{M} \mathcal{L}(A^{(i)}, P^{(i)}, N^{(i)})<br>$$<br>很明显，在训练样本中，一个人需要有多张照片才能组合出这样的三元组。</p><p>那么，应该怎么选择三元组呢，</p><ul><li>During training, if A, P, N are chsen randomly, $d(A, P) + \alpha \le d(A, N)$ is easily satisfied.<ul><li>这种方法容易选择，但是训练出来的模型效果一般</li></ul></li><li>Choose triplets that’re “hard” to train on.<ul><li>这种方法不容易选择，但是模型能学习到更多的信息。</li></ul></li></ul><h3 id="Face-Verification-and-Binary-Classification"><a href="#Face-Verification-and-Binary-Classification" class="headerlink" title="Face Verification and Binary Classification"></a>Face Verification and Binary Classification</h3><p>另一种similarity function，以一对图像作为输入，<br>$$<br>\hat{y} = \delta ( \sum_{k=1}^{128} w_i | f(x^{(i)})_k - f(x^{(j)})_k   | + b  )<br>$$<br>其中，$f(x^{(i)})$表示对第i张图像的128维的embedding表达。</p><h3 id="What-are-deep-ConvNets-Learning"><a href="#What-are-deep-ConvNets-Learning" class="headerlink" title="What are deep ConvNets Learning"></a>What are deep ConvNets Learning</h3><p>这里介绍了怎么将卷积神经网络的hidden layer可视化。以第一层为例，</p><blockquote><p>Pick a unit in layer 1. Find the nine image patches that maximize the unit’s activation.</p><p>Repeat for other units.</p></blockquote><p>可以看到，每个unit’s activation针对的方向不同，有的是颜色，有的是不同方向的边。随着网络深度的增加，每个unit’s activation可以看到的图像的范围越来越大。</p><h3 id="Neural-Style-Transfer-Cost-Function"><a href="#Neural-Style-Transfer-Cost-Function" class="headerlink" title="Neural Style Transfer Cost Function"></a>Neural Style Transfer Cost Function</h3><p>原始内容图片为C，风格图片为S，目标图片为G，那么，$G_{kk’}^{[l]}$<br>$$<br>J(G) = \alpha J_{content}(C, G) + \beta J_{style}(S, G)<br>$$</p><p>下面介绍Style matrix,<br>$$<br>\begin{split}<br>&amp; Let~a_{i,j,k}^{[l]} &amp;= activation~at~(i,j,k). G^{[l]}~is~n_c^{[l]} \times n_c^{[l]} \\<br>\rightarrow &amp; G_{kk’}^{[l]} &amp;= \sum_{i=1}^{n_H^{[l]}} \sum_{j=1}^{[n_W]^{[l]}} a_{ijk}^{[l]} a_{ijk’}^{[l]}<br>\end{split}<br>$$<br>其中，$G^{[l]}$为Style matrix。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;What-is-Face-Recognition&quot;&gt;&lt;a href=&quot;#What-is-Face-Recognition&quot; class=&quot;headerlink&quot; title=&quot;What is Face Recognition&quot;&gt;&lt;/a&gt;What is Face Recognition&lt;/h3&gt;&lt;p&gt;这里区分两个概念，&lt;code&gt;Face verification&lt;/code&gt;和&lt;code&gt;Face recognition&lt;/code&gt;，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Verification&lt;ul&gt;
&lt;li&gt;输入：图像 + 名字/ID&lt;/li&gt;
&lt;li&gt;输出：输入的图像上是否有名字/ID表示的那个人&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Recognition&lt;ul&gt;
&lt;li&gt;数据库中有$K$个人&lt;/li&gt;
&lt;li&gt;输入：图像&lt;/li&gt;
&lt;li&gt;输出：图像上有的数据库中的人的名字/ID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很明显，Recognition比Verification的难度要大得多。&lt;br&gt;
    
    </summary>
    
      <category term="deep-learning" scheme="http://github.com/categories/deep-learning/"/>
    
    
  </entry>
  
  <entry>
    <title>Convolutional Neural Networks / Week 1</title>
    <link href="http://github.com/2018/04/12/Convolutional-Neural-Networks-Week-1/"/>
    <id>http://github.com/2018/04/12/Convolutional-Neural-Networks-Week-1/</id>
    <published>2018-04-12T09:09:44.000Z</published>
    <updated>2018-04-12T12:42:44.005Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Computer-Vision"><a href="#Computer-Vision" class="headerlink" title="Computer Vision"></a>Computer Vision</h3><p>Computer Vision Problems include:</p><ul><li>Image Classication</li><li>Object Detection</li><li>… …</li></ul><p>One of the challenges of computer vision problems is that the input can be very big. For example, a 1000 by 1000 image can have $1000 \times  64 \times 3 = 12288$ dimensions because there are three color channels. If the size of hidden layer is 1000, the number of parameters from input layer to hidden layer could be 3 billion. This will cause these problems:</p><ol><li>data size requirements;</li><li>computational requirements;</li><li>memory requirements.</li></ol><a id="more"></a><h3 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h3><p>The problems of convolutional operation:</p><ol><li>shrinking output</li><li>throwing away a lot of information from the edges of the image</li></ol><p>In order to fix these problems, what we need to do is <strong>pad the image</strong>.</p><p>通常有两种padding的方式：</p><ul><li>Valid convolution: 意思是不采用padding的方式。</li><li>Same convolution：意思是输出的尺寸和输入的尺寸相同。<ul><li>在这种情况下可以推导出$p = \frac{f-1}{2}$，所以在计算机视觉的模型中，filter的尺寸通常是奇数而不是偶数。</li><li>Filter的尺寸是奇数还有另外一个好处，就是filter可以有中心像素，可以很方便的用来定位filter的位置。</li></ul></li></ul><h3 id="Strided-Convolutions"><a href="#Strided-Convolutions" class="headerlink" title="Strided Convolutions"></a>Strided Convolutions</h3><p>给定如下条件，<br>$$<br>\begin{split}<br>&amp;n\times n~image~~~~&amp;f\times f~filter\\<br>&amp;padding~p&amp;stride~s<br>\end{split}<br>$$<br>经过Strided Convolutions之后得到的tensor的尺寸为，<br>$$<br>\lfloor \frac{n + 2p - f}{s} + 1 \rfloor \times \lfloor \frac{n + 2p - f}{s} + 1 \rfloor<br>$$</p><blockquote><p>NG在这里提到，我们所谓的convolution并不是真正意义上的卷积，而是应该称为cross-correlation，它之前实际上应该有一个针对卷积核的变换操作，这些操作再加上cross-correlation才是真正的convolution。但是这个变换操作没什么用处，所以通常情况下就省略了。</p></blockquote><h3 id="Convolutions-Over-Volume"><a href="#Convolutions-Over-Volume" class="headerlink" title="Convolutions Over Volume"></a>Convolutions Over Volume</h3><p>在RGB类型的多通道图像中使用Multiple filters：<br>$$<br>n \times n \times n_c \ast f\times f \times n_c \rightarrow (n - f + 1) \times (n - f + 1) \times {n_c}’<br>$$<br>其中，$n$表示图像的长宽，$f$表示filter的长宽，$n_c$表示图像的通道数，$n_c’$表示filter的个数。</p><h3 id="One-Layer-of-a-Convolutional-Network"><a href="#One-Layer-of-a-Convolutional-Network" class="headerlink" title="One Layer of a Convolutional Network"></a>One Layer of a Convolutional Network</h3><p>普通的BP神经网络的数学表达形式如下：<br>$$<br>\begin{split}<br>z^{[1]} &amp;= w^{[1]} a^{[0]} + b^{[1]} \\<br>a^{[1]} &amp;= g(z^{[1]})<br>\end{split}<br>$$<br>在CNN中，convolution operation相当于$w^{[1]}a^{[0]}$，也就是充当了原先线性变换的角色。</p><p>这里对卷积层中涉及到的符号进行总结，<br>$$<br>\begin{split}<br>f^{[l]} &amp;= filter~size \\<br>p^{[l]} &amp;= padding \\<br>s^{[l]} &amp;= stride \\<br>n_{C}^{[l]} &amp;= number~of~filters<br>\end{split}<br>\tag{1}<br>$$<br>接着定义卷积层的输入和输出表示，<br>$$<br>\begin{split}<br>Input:~&amp;n_H^{[l-1]} \times n_W^{[l-1]} \times n_C^{[l-1]} \\<br>Output:~&amp;n_H^{[l]} \times n_W^{[l]} \times n_C^{[l]}<br>\end{split}<br>\tag{2}<br>$$</p><p>基于(1)和(2)，我们可以进行如下定义，<br>$$<br>\begin{split}<br>&amp;Each~filter~is:~    &amp;f^{[l]} \times f^{[l]} \times n_C^{[l-1]} \\<br>&amp;Activations:~        &amp;a^{[l]} \rightarrow n_H^{[l]} \times n_W^{[l]} \times n_C^{[l]} \\<br>&amp;Weights:~        &amp;f^{[l]} \times f^{[l]} \times n_C^{[l-1]} \times n_C^{[l]} \\<br>&amp;bias:~            &amp;n_C^{[l]}<br>\end{split}<br>\tag{3}<br>$$<br>在式(2)中，$n_H^{[l]}$与$n_H^{[l-1]}$的关系如下，<br>$$<br>n_H^{[l]} = \lfloor \frac{n_H^{[l - 1]} + 2p^{[l]} - f^{[l]}}{s^{l}} + 1 \rfloor<br>$$<br>在式(3)中，Activations是单个样本的形式，batch的形式如下，<br>$$<br>A^{[l]} \rightarrow m \times n_H^{[l]} \times n_W^{[l]} \times n_C^{[l]}<br>$$</p><h3 id="Simple-Convolution-Network-Example"><a href="#Simple-Convolution-Network-Example" class="headerlink" title="Simple Convolution Network Example"></a>Simple Convolution Network Example</h3><p>以图像分类为例（识别图片中是否有猫），经过若干卷积层之后，为了得到最终的$0/1$分类结果，会将最后一层卷积的tensor展开并拉长成vector，经过logistic/softmax单元后得到代表预测结果的概率值。</p><p>在使用ConvNet的过程中，比较麻烦的地方在于如何确定超参。有一个常用的指导方针是，activations的长和宽需要越来越小（也就是图片的尺寸越来越小），同时通道数需要越来越多（也就是activations的第三个维度）。之后会详细介绍怎么需选择超参。</p><p>在ConvNet中，通常有三种类型的网络层，</p><ul><li>Convolution (CONV)</li><li>Pooling (POOL)</li><li>Fully connected (FC)</li></ul><h3 id="Pooling-Layers"><a href="#Pooling-Layers" class="headerlink" title="Pooling Layers"></a>Pooling Layers</h3><p>Pooling Layer有如下好处，</p><ul><li>减少图像representation的尺寸，提高计算速度</li><li>提高鲁棒性</li></ul><p>很有意思的地方在于，对于pooling layer来说，我们只需要确定超参数$f^{[l]}$和$s^{[l]}$，以及是max pooling 还是average pooling，并不需要进行参数的学习。</p><p>在pooling layer中，超参$p^{[l]}$通常设置为0。</p><h3 id="CNN-Example"><a href="#CNN-Example" class="headerlink" title="CNN Example"></a>CNN Example</h3><p>神经网络中常用的一种模式是，若干卷积层之后加池化层，再若干层卷积层之后接池化层，然后接全连接层，最后给softmax单元。NG在课上画了一个例子如下，</p><div align="center"><br><br><img src="https://raw.githubusercontent.com/HouJP/my-hexo/master/source/img/cnn-w1/cnn-example.jpeg" alt="cnn-example"><br><br></div><h3 id="Why-Convolutions"><a href="#Why-Convolutions" class="headerlink" title="Why Convolutions"></a>Why Convolutions</h3><p>卷积层最显著的特点就是参数数量大大小于全连接层的数量，因为：</p><ol><li>Parameter sharing: 图像的不同位置共享filters。</li><li>Sparsity of connections: 每个输出值只取决于很小的一部分输入。这样也降低了过拟合的风险。</li></ol><p>卷积神经网络的损失函数定义如下所示，<br>$$<br>Cost~J = \frac{1}{m} \sum_{i-1}^{m} \mathcal{L}(\hat{y}^{(i)}, y^{(i)})<br>$$</p><h3 id="Programming-Assignments"><a href="#Programming-Assignments" class="headerlink" title="Programming Assignments"></a>Programming Assignments</h3><h4 id="Convolutional-Model-step-by-step"><a href="#Convolutional-Model-step-by-step" class="headerlink" title="Convolutional Model: step by step"></a>Convolutional Model: step by step</h4><p>卷积层和池化层的区别：</p><ul><li>卷积层中的每个filter都会同时作用在不同的channel上</li><li>在池化层中，filter与channel一一对应，作用在对应的channel上</li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li><a href="http://www.cnblogs.com/nowgood/p/Latexstart.html" target="_blank" rel="external">MarkDown中使用Latex数学公式</a></li><li><a href="http://masikkk.com/article/hexo-13-MathJax/" target="_blank" rel="external">Hexo博客(13)添加MathJax数学公式渲染</a><ul><li>解释了Markdown和Mathjax渲染冲突问题</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Computer-Vision&quot;&gt;&lt;a href=&quot;#Computer-Vision&quot; class=&quot;headerlink&quot; title=&quot;Computer Vision&quot;&gt;&lt;/a&gt;Computer Vision&lt;/h3&gt;&lt;p&gt;Computer Vision Problems include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image Classication&lt;/li&gt;
&lt;li&gt;Object Detection&lt;/li&gt;
&lt;li&gt;… …&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the challenges of computer vision problems is that the input can be very big. For example, a 1000 by 1000 image can have $1000 \times  64 \times 3 = 12288$ dimensions because there are three color channels. If the size of hidden layer is 1000, the number of parameters from input layer to hidden layer could be 3 billion. This will cause these problems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;data size requirements;&lt;/li&gt;
&lt;li&gt;computational requirements;&lt;/li&gt;
&lt;li&gt;memory requirements.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="deep-learning" scheme="http://github.com/categories/deep-learning/"/>
    
    
  </entry>
  
  <entry>
    <title>利用GitHub搭建一个你的博客</title>
    <link href="http://github.com/2018/04/12/%E5%88%A9%E7%94%A8GitHub%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://github.com/2018/04/12/利用GitHub搭建一个你的博客/</id>
    <published>2018-04-12T08:04:26.000Z</published>
    <updated>2018-04-12T08:14:41.109Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1917079-bbc62e5e352027e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Photo From Google"></p><blockquote><p><em>为什么要写博客</em><br>作为一只程序猿，踩到坑是一件非常正常的事，当我们踩到坑的时候就会花心思去研究它，可能我们能够在当时把问题弄懂并把问题给解决掉。可是过一段时间我们又遇到了同样的坑的时候，难道还要再去 百毒 Google 重新搜索一遍吗？这样做效率难免太低了，倒不如在第一次解决问题的时候就把解决方法写到我们的博客了，当我们再一次遇到相同的坑的时候翻一翻我们之前写的博客就能快速的把问题给解决掉，何乐而不为。而且我们学习新技术的时候也可以将当时学到的内容写到我们的博客，再次遇到的时候我们就可以找回当时学习的思路，继续学习。废话不多说，马上开始行动起来，搭建博客！</p></blockquote><p><em>声明：本文在Windows下进行操作的，Mac以及其它操作系统请做参考</em> <strong>多图警告！</strong><br><a id="more"></a></p><h1 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h1><p>首先需要下载两个东西</p><ul><li>node.js</li><li>git</li></ul><p>具体的下载，安装就不用多说了，基本上下载完默认安装即可，<strong>安装的路径最好先记住。</strong>Git 安装的时候会弹出下面的窗口，我们选择第二个即可。这样我们在Windows的命令窗口也可以进行Git操作了。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-d279f8f09a9d0587.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="Git Setup Detail">两个都安装完了之后，打开命令窗口（按住Win+R后输入CMD即可打开命令窗口），分别输入 <strong>node -v</strong> 、<strong>npm -v</strong> 及  <strong>git –version</strong> 这三个命令是为了查看刚才我们安装的软件的版本，如果你能够看到他们的版本号（如同下图，也许版本号会有不同），那么恭喜你，环境搭建这一个大难关你已经过了，可以进入下一步骤了。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-2c0ae66c2886eedb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/840" alt="Check Version"></p><h2 id="1-1有问题看这里"><a href="#1-1有问题看这里" class="headerlink" title="1.1有问题看这里"></a>1.1有问题看这里</h2><blockquote><p>打开我们刚才安装软件的路径，例如我的路径“D:\Program Files\nodejs”、“D:\Program Files\Git”。<br>复制我们刚才安装的路径,打开计算机&gt;右键单击属性，选择高级系统设置&gt;选择环境变量&gt;双击 PATH &gt;将我们安装的路径追加到变量值之后  <em>！注意分号以及确定保存</em><br>这个时候再试一下 <strong>node -v</strong> 、<strong>npm -v</strong> 及  <strong>git –version</strong> 这三个命令，一般都不会有问题的了。</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1917079-f5ebafd2c0256c5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PATH"></p><h1 id="2-配置-GitHub"><a href="#2-配置-GitHub" class="headerlink" title="2.配置 GitHub"></a>2.配置 GitHub</h1><h2 id="2-1注册-GitHub"><a href="#2-1注册-GitHub" class="headerlink" title="2.1注册 GitHub"></a>2.1注册 GitHub</h2><p>先到<a href="https://github.com/">GitHub</a>官网Sign up(注册)一个账号。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-937b97e258d38e41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">填好用户名、邮箱、密码进入下一步<br><img src="http://upload-images.jianshu.io/upload_images/1917079-b03b792d91ab0671.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="2-2SSH授权"><a href="#2-2SSH授权" class="headerlink" title="2.2SSH授权"></a>2.2SSH授权</h2><p>注册好账号之后我们可以随意的查看其他人的项目，甚至是clone下载，但是要提交代码就必须完成SSH授权，如果可以不用授权就提交代码的话，那么Github岂不是乱了套。</p><h3 id="2-2-1生成SSH-key"><a href="#2-2-1生成SSH-key" class="headerlink" title="2.2.1生成SSH key"></a>2.2.1生成SSH key</h3><p>打开Git Bash，输入<strong>ssh-keygen -t rsa</strong>然后按三下回车，如下图所示<br><img src="http://upload-images.jianshu.io/upload_images/1917079-79e0d9366df4b6d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">接着就会在C:\Users\Administrator.ssh目录下生成到id_rsa和id_rsa.pub两个文件，id_rsa是密钥，id_rsa.pub是公钥，接下来需要将id_rsa.pub的内容添加到GitHub上，这样本地的id_rsa密钥才能跟GitHub上的id_rsa.pub公钥进行配对，才能够授权成功。</p><h3 id="2-2-2在GitHub上添加SSH-Key"><a href="#2-2-2在GitHub上添加SSH-Key" class="headerlink" title="2.2.2在GitHub上添加SSH Key"></a>2.2.2在GitHub上添加SSH Key</h3><p>首先点击右上角的倒三角进入Settings<br><img src="http://upload-images.jianshu.io/upload_images/1917079-e3d0c7eea2332037.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">紧接着选择左侧SSH and GPG keys,然后选择右上角的New SSH key，再把id_sra.pub的内容复制粘贴到key（id_sra.pub可以使用 sublime 或者 记事本打开），最后Add SSH key就可以了。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-9082e2dc5100b5ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">SSH key 添加成功之后，输入 <strong>ssh -T git@github.com </strong>进行测试，如果出现以下提示证明添加成功了。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-d8426bee3c9c6214.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>这一步一般没什么问题，有问题的话留言评论（顺便来一波打赏）就好了。直接进入下一步！</p></blockquote><h1 id="3-创建-GitHub-仓库"><a href="#3-创建-GitHub-仓库" class="headerlink" title="3.创建 GitHub 仓库"></a>3.创建 GitHub 仓库</h1><p><img src="http://upload-images.jianshu.io/upload_images/1917079-112ad11f7974fd44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/1917079-aaa2539f1226b466.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>需要特别注意的是，项目名称一定要使用 <strong>你的名字 + .github.io</strong><br>这一步也没什么问题，如果有问题，一定是你没有给我打赏(∩_∩)</p></blockquote><h1 id="4-设置本地博客的配置"><a href="#4-设置本地博客的配置" class="headerlink" title="4.设置本地博客的配置"></a>4.设置本地博客的配置</h1><h2 id="4-1安装Hexo"><a href="#4-1安装Hexo" class="headerlink" title="4.1安装Hexo"></a>4.1安装Hexo</h2><p>在你认为合适的地方创建一个文件夹，然后在文件夹空白处按住 Shift+鼠标右键，然后点击在此处打开命令行窗口。<em>（同样要记住啦，下文中会使用在当前目录打开命令行来代指上述的操作）</em><br>在命令行输入<strong>npm install -g hexo</strong><br><img src="http://upload-images.jianshu.io/upload_images/1917079-f3663d24b77c657f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">然后输入  <strong>npm install hexo –save</strong>  这时候你会看到命令窗口刷了一堆白字，然后输入  <strong>hexo -v</strong>  查看hexo是否安装成功了。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-2ee108b687f83785.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">如果出现与上图一样的情况的话，就说明你离成功就近在咫尺了。</p><h2 id="4-2初始化Hexo"><a href="#4-2初始化Hexo" class="headerlink" title="4.2初始化Hexo"></a>4.2初始化Hexo</h2><p>同样是在命令窗口中，继续输入 <strong>hexo init</strong>，等待下载好了之后输入 <strong>hexo s</strong><br><img src="http://upload-images.jianshu.io/upload_images/1917079-0ef349bf31778b1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/1917079-e2459abaa5856b55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">这时候我们就可以打开浏览器了，在地址栏中输入 <strong><a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></strong> 我们就可以看到如下图的界面，这个就是我们的博客。没错，我们的博客就这样建好了。不过这个只是我们本地的博客，下面就要考虑怎么把我们的本地博客上传到我们的GitHub上了。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-76c91b2b5b635921.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>接下来先看一下我们的博客文章放在哪里。打开我们的文件夹下面的<strong>source</strong>文件夹，你会发现里面有一个<strong>_posts</strong>文件夹，再进入就会看到一片初始化的文章<strong>hello-world.md</strong>也就是上图显示在页面的文章。如果我们想新建文章的话，可以通过命令窗口输入<strong>hexo new ‘filename’</strong>我们的文件夹下面就会生成一个新的md文件，然后我们打开编辑就可以了。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-3c1d6dc9e4fd0599.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="4-3发布博客"><a href="#4-3发布博客" class="headerlink" title="4.3发布博客"></a>4.3发布博客</h2><p>首先复制我们的GitHub项目地址，如下图。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-d3b4db2b572d72d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">然后打开我们新建的文件夹下面生成的<strong>_config.yml</strong>文件，在最下方作如下修改。<br><img src="http://upload-images.jianshu.io/upload_images/1917079-dd0cc5ee5ab8c286.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>deploy 是部署的意思，<strong>type: git</strong> 就是使用 git 进行部署，<strong>repo: github仓库地址</strong></p><blockquote><p>注意：repo 原本是没有的，在最后自己加上就好。<strong>冒号之后有一个空格 冒号之后有一个空格 冒号之后有一个空格</strong></p></blockquote><p>接下来回到命令窗口，输入 <strong>npm install hexo-deployer-git –save</strong><br><img src="http://upload-images.jianshu.io/upload_images/1917079-ef7dd8222dc93fa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">安装好Git上传插件之后，输入 <strong>hexo g</strong>，然后输入 <strong>hexo d</strong>就可以将我们的博客上传到我们的GitHub了，而且以后更新文章就只需要用这两个命令就可以了。这样别人也可以通过 <a href="https://kingjamesyf.github.io" target="_blank" rel="external">https://yourname.github.io</a> 来访问我们的博客了（开头一定要用<strong>https</strong>，yourname是你的github的名字）。</p><h1 id="5-个性化设置（更换主题）"><a href="#5-个性化设置（更换主题）" class="headerlink" title="5.个性化设置（更换主题）"></a>5.个性化设置（更换主题）</h1><p>有木有觉得这个博客的默认主题特别的丑，如果不觉得可以忽略这一步（哈哈）。<br>这里以我使用的主题为例。<br>第一步去找我们想要的主题，然后下载下来。我用的是next主题，在命令窗口输入<strong><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></strong><br><img src="http://upload-images.jianshu.io/upload_images/1917079-1e544cdcfc69626f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/1917079-575bd78b61c2f0d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">然后打开配置文件，找到 theme 将原来默认的 landscape 替换 next。然后在命令窗口输入 <strong>hexo clean</strong> 、<strong>hexo g</strong> 及 <strong>hexo s</strong>，先看一下本地博客是什么样子，确认好了在输入 <strong>hexo d</strong> 部署到GitHub<br><img src="http://upload-images.jianshu.io/upload_images/1917079-ac979cf65087b7b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>每一个主题都有一个使用文档，next的使用文档为 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a> 我们可以为我们的主题修改名字，添加评论等等，具体的你们就自己去研究了。</p><blockquote><p>如果文章对你有所帮助，那么请您点一下❤<br>由于本人水平有限，如有错误，欢迎大家指正。如果你在操作过程中发现一些没有讲到的错误或者问题，欢迎在评论留言，一起探讨，共同学习进步！<br><strong>有钱的来波赞赏，没钱的来波Star</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1917079-bbc62e5e352027e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Photo From Google&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;为什么要写博客&lt;/em&gt;&lt;br&gt;作为一只程序猿，踩到坑是一件非常正常的事，当我们踩到坑的时候就会花心思去研究它，可能我们能够在当时把问题弄懂并把问题给解决掉。可是过一段时间我们又遇到了同样的坑的时候，难道还要再去 百毒 Google 重新搜索一遍吗？这样做效率难免太低了，倒不如在第一次解决问题的时候就把解决方法写到我们的博客了，当我们再一次遇到相同的坑的时候翻一翻我们之前写的博客就能快速的把问题给解决掉，何乐而不为。而且我们学习新技术的时候也可以将当时学到的内容写到我们的博客，再次遇到的时候我们就可以找回当时学习的思路，继续学习。废话不多说，马上开始行动起来，搭建博客！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;声明：本文在Windows下进行操作的，Mac以及其它操作系统请做参考&lt;/em&gt; &lt;strong&gt;多图警告！&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://github.com/categories/blog/"/>
    
    
      <category term="Git笔记" scheme="http://github.com/tags/Git%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git--命令(一)</title>
    <link href="http://github.com/2018/04/12/Git--%E5%91%BD%E4%BB%A4(%E4%B8%80)/"/>
    <id>http://github.com/2018/04/12/Git--命令(一)/</id>
    <published>2018-04-12T07:02:42.000Z</published>
    <updated>2018-04-13T14:02:27.347Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>git命令学习</p></blockquote><h1 id="Git笔记"><a href="#Git笔记" class="headerlink" title=" Git笔记 "></a><p align="center"> Git笔记 </p></h1><p><img src="http://oo8jzybo8.bkt.clouddn.com/hello-github.jpg" alt=""></p><h2 id="GitHub介绍"><a href="#GitHub介绍" class="headerlink" title="GitHub介绍"></a>GitHub介绍</h2><p>GitHub 是为开发者提供 Git 仓库的托管服务。这是一个让开发者与朋友、同事、同学及陌生人共享代码的完美场所。总结一下，GitHub 最大的特征是“面向人”</p><p>Git是一个“<strong>分布式版本管理工具</strong>”，简单的理解版本管理工具：大家在写东西的时候都用过“回撤”这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用“回撤”是找不回来的。而“<strong>版本管理工具</strong>”能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。</p><ul><li><p><strong>统一概念</strong></p><ul><li>工作区：改动（增删文件和内容）</li><li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了‘暂存区’</li><li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了’本地仓库’，每个commit，我叫它为一个‘版本’。</li><li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了‘远程仓库’（GitHub等)</li><li>分支：Git鼓励你使用<code>branch</code>完成某个任务，合并后再删掉分支，过程更安全。</li><li>commit-id：输出命令：<code>git log</code>，最上面那行<code>commit xxxxxx</code>，后面的字符串就是commit-id</li></ul></li></ul><p>参考<a href="https://github.com/git-tips/tips">tips</a>项目,和廖雪峰老师的<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">git网站</a>。</p><a id="more"></a><h2 id="Git介绍"><a href="#Git介绍" class="headerlink" title="Git介绍"></a>Git介绍</h2><ul><li>Git是分布式版本控制系统</li><li>集中式VS分布式，SVN VS Git<ol><li>SVN和Git主要的区别在于历史版本维护的位置</li><li>Git本地仓库包含代码库还有历史库，在本地的环境开发就可以记录历史而SVN的历史库存在于中央仓库，每次对比与提交代码都必须连接到中央仓库才能进行。</li><li>这样的好处在于：<ul><li>自己可以在脱机环境查看开发的版本历史。</li><li>多人开发时如果充当中央仓库的Git仓库挂了，可以随时创建一个新的中央仓库然后同步就立刻恢复了中央库。</li></ul></li></ol></li></ul><h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"Your Name"</span></div><div class="line">$ git config --global user.email <span class="string">"email@example.com"</span></div></pre></td></tr></table></figure><p><code>git config</code>命令的<code>--global</code>参数，表明这台机器上的所有Git仓库都会使用这个配置，也可以对某个仓库指定不同的用户名和邮箱地址。</p><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><h4 id="初始化一个Git仓库"><a href="#初始化一个Git仓库" class="headerlink" title="初始化一个Git仓库"></a>初始化一个Git仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure><h4 id="添加文件到Git仓库"><a href="#添加文件到Git仓库" class="headerlink" title="添加文件到Git仓库"></a>添加文件到Git仓库</h4><p>包括两步：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add &lt;file&gt;</div><div class="line">$ git commit -m <span class="string">"description"</span></div></pre></td></tr></table></figure></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。</span></div><div class="line">$ git add .   </div><div class="line"></div><div class="line"><span class="comment">#仅监控已经被add的文件,不会提交新文件（untracked file）</span></div><div class="line">$ git add -u</div><div class="line"></div><div class="line"><span class="comment">#是上面两个功能的合集（git add --all的缩写）</span></div><div class="line">$ git add -A</div></pre></td></tr></table></figure><p><code>git add</code>可以反复多次使用，添加多个文件，<code>git commit</code>可以一次提交很多文件，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容。</p><h3 id="显示文件树形结构"><a href="#显示文件树形结构" class="headerlink" title="显示文件树形结构"></a>显示文件树形结构</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ tree /f<span class="comment">#指定tree使用字符而不是图形字符显示链接子目录的行</span></div><div class="line">$ tree /a<span class="comment">#显示每个目录中的文件名</span></div><div class="line">``</div><div class="line"></div><div class="line"><span class="comment">### 查看工作区状态</span></div><div class="line">```bash</div><div class="line">$ git status</div></pre></td></tr></table></figure><h3 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff --cached</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff HEAD -- &lt;file&gt;</div></pre></td></tr></table></figure><ul><li><code>git diff</code> 可以查看工作区(work dict)和暂存区(stage)的区别</li><li><code>git diff --cached</code> 可以查看暂存区(stage)和分支(master)的区别</li><li><code>git diff HEAD -- &lt;file&gt;</code> 可以查看工作区和版本库里面最新版本的区别</li></ul><h3 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span></div></pre></td></tr></table></figure><p>简化日志输出信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --pretty=oneline</div></pre></td></tr></table></figure></p><h3 id="查看命令历史"><a href="#查看命令历史" class="headerlink" title="查看命令历史"></a>查看命令历史</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard HEAD^</div></pre></td></tr></table></figure><p>以上命令是返回上一个版本，在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本是<code>HEAD^^</code>，往上100个版本写成<code>HEAD~100</code>。</p><h3 id="回退指定版本号"><a href="#回退指定版本号" class="headerlink" title="回退指定版本号"></a>回退指定版本号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard commit_id</div></pre></td></tr></table></figure><p>commit_id是版本号，是一个用SHA1计算出的序列</p><h3 id="工作区、暂存区和版本库"><a href="#工作区、暂存区和版本库" class="headerlink" title="工作区、暂存区和版本库"></a>工作区、暂存区和版本库</h3><p>工作区：在电脑里能看到的目录；<br><br>版本库：在工作区有一个隐藏目录<code>.git</code>，是Git的版本库。<br><br>Git的版本库中存了很多东西，其中最重要的就是称为stage（或者称为index）的暂存区，还有Git自动创建的<code>master</code>，以及指向<code>master</code>的指针<code>HEAD</code>。</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907720458e56751df1c474485b697575073c40ae9000/0" alt="理解"></p><p>进一步解释一些命令：</p><ul><li><code>git add</code>实际上是把文件添加到暂存区</li><li><code>git commit</code>实际上是把暂存区的所有内容提交到当前分支</li></ul><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><h4 id="丢弃工作区的修改"><a href="#丢弃工作区的修改" class="headerlink" title="丢弃工作区的修改"></a>丢弃工作区的修改</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- &lt;file&gt;</div></pre></td></tr></table></figure><p>该命令是指将文件在工作区的修改全部撤销，这里有两种情况：</p><ol><li>一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</li><li>一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</li></ol><p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p><h4 id="丢弃暂存区的修改"><a href="#丢弃暂存区的修改" class="headerlink" title="丢弃暂存区的修改"></a>丢弃暂存区的修改</h4><p>分两步：<br>第一步，把暂存区的修改撤销掉(unstage)，重新放回工作区：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset HEAD &lt;file&gt;</div></pre></td></tr></table></figure></p><p>第二步，撤销工作区的修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- &lt;file&gt;</div></pre></td></tr></table></figure></p><p>小结：</p><ol><li>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- &lt;file&gt;</code>。</li><li><p>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了第一步，第二步按第一步操作。</p></li><li><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，进行版本回退，前提是没有推送到远程库。</p></li></ol><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rm &lt;file&gt;</div></pre></td></tr></table></figure><p><code>git rm &lt;file&gt;</code>相当于执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rm &lt;file&gt;</div><div class="line">$ git add &lt;file&gt;</div></pre></td></tr></table></figure></p><h4 id="进一步的解释"><a href="#进一步的解释" class="headerlink" title="进一步的解释"></a>进一步的解释</h4><p>Q：比如执行了<code>rm text.txt</code> 误删了怎么恢复？<br><br>A：执行<code>git checkout -- text.txt</code> 把版本库的东西重新写回工作区就行了<br><br>Q：如果执行了<code>git rm text.txt</code>我们会发现工作区的text.txt也删除了，怎么恢复？<br><br>A：先撤销暂存区修改，重新放回工作区，然后再从版本库写回到工作区<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git reset head text.txt</div><div class="line">$ git checkout -- text.txt</div></pre></td></tr></table></figure></p><p>Q：如果真的想从版本库里面删除文件怎么做？<br>A：执行<code>git commit -m &quot;delete text.txt&quot;</code>，提交后最新的版本库将不包含这个文件</p><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><h4 id="创建SSH-Key"><a href="#创建SSH-Key" class="headerlink" title="创建SSH Key"></a>创建SSH Key</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div></pre></td></tr></table></figure><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin https://github.com/username/repositoryname.git</div></pre></td></tr></table></figure><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure><p><code>-u</code> 表示第一次推送master分支的所有内容，此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改。</p><h4 id="从远程克隆"><a href="#从远程克隆" class="headerlink" title="从远程克隆"></a>从远程克隆</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/usern/repositoryname.git</div></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch &lt;branchname&gt;</div></pre></td></tr></table></figure><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch</div></pre></td></tr></table></figure><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个*号。</p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout &lt;branchname&gt;</div></pre></td></tr></table></figure><h4 id="创建-切换分支"><a href="#创建-切换分支" class="headerlink" title="创建+切换分支"></a>创建+切换分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b &lt;branchname&gt;</div></pre></td></tr></table></figure><h4 id="合并某分支到当前分支"><a href="#合并某分支到当前分支" class="headerlink" title="合并某分支到当前分支"></a>合并某分支到当前分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge &lt;branchname&gt;</div></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -d &lt;branchname&gt;</div></pre></td></tr></table></figure><h4 id="查看分支合并图"><a href="#查看分支合并图" class="headerlink" title="查看分支合并图"></a>查看分支合并图</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> --graph</div></pre></td></tr></table></figure><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。用<code>git log --graph</code>命令可以看到分支合并图。</p><h4 id="普通模式合并分支"><a href="#普通模式合并分支" class="headerlink" title="普通模式合并分支"></a>普通模式合并分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git merge --no-ff -m <span class="string">"description"</span> &lt;branchname&gt;</div></pre></td></tr></table></figure><p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，能看出来曾经做过合并，包含作者和时间戳等信息，而fast forward合并就看不出来曾经做过合并。</p><h4 id="保存工作现场"><a href="#保存工作现场" class="headerlink" title="保存工作现场"></a>保存工作现场</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash</div></pre></td></tr></table></figure><h4 id="查看工作现场"><a href="#查看工作现场" class="headerlink" title="查看工作现场"></a>查看工作现场</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash list</div></pre></td></tr></table></figure><h4 id="恢复工作现场"><a href="#恢复工作现场" class="headerlink" title="恢复工作现场"></a>恢复工作现场</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash pop</div></pre></td></tr></table></figure><h4 id="丢弃一个没有合并过的分支"><a href="#丢弃一个没有合并过的分支" class="headerlink" title="丢弃一个没有合并过的分支"></a>丢弃一个没有合并过的分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -D &lt;branchname&gt;</div></pre></td></tr></table></figure><h4 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div></pre></td></tr></table></figure><h4 id="在本地创建和远程分支对应的分支"><a href="#在本地创建和远程分支对应的分支" class="headerlink" title="在本地创建和远程分支对应的分支"></a>在本地创建和远程分支对应的分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b branch-name origin/branch-name，</div></pre></td></tr></table></figure><p>本地和远程分支的名称最好一致；</p><h4 id="建立本地分支和远程分支的关联"><a href="#建立本地分支和远程分支的关联" class="headerlink" title="建立本地分支和远程分支的关联"></a>建立本地分支和远程分支的关联</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --<span class="built_in">set</span>-upstream branch-name origin/branch-name；</div></pre></td></tr></table></figure><h4 id="从本地推送分支"><a href="#从本地推送分支" class="headerlink" title="从本地推送分支"></a>从本地推送分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin branch-name</div></pre></td></tr></table></figure><p>如果推送失败，先用git pull抓取远程的新提交；</p><h4 id="从远程抓取分支"><a href="#从远程抓取分支" class="headerlink" title="从远程抓取分支"></a>从远程抓取分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull</div></pre></td></tr></table></figure><p>如果有冲突，要先处理冲突。</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p><h4 id="新建一个标签"><a href="#新建一个标签" class="headerlink" title="新建一个标签"></a>新建一个标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag &lt;tagname&gt;</div></pre></td></tr></table></figure><p>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id。</p><h4 id="指定标签信息"><a href="#指定标签信息" class="headerlink" title="指定标签信息"></a>指定标签信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -a &lt;tagname&gt; -m &lt;description&gt; &lt;branchname&gt; or commit_id</div></pre></td></tr></table></figure><p><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息。</p><h4 id="PGP签名标签"><a href="#PGP签名标签" class="headerlink" title="PGP签名标签"></a>PGP签名标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -s &lt;tagname&gt; -m &lt;description&gt; &lt;branchname&gt; or commit_id</div></pre></td></tr></table></figure><p><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签。</p><h4 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a>查看所有标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag</div></pre></td></tr></table></figure><h4 id="推送一个本地标签"><a href="#推送一个本地标签" class="headerlink" title="推送一个本地标签"></a>推送一个本地标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin &lt;tagname&gt;</div></pre></td></tr></table></figure><h4 id="推送全部未推送过的本地标签"><a href="#推送全部未推送过的本地标签" class="headerlink" title="推送全部未推送过的本地标签"></a>推送全部未推送过的本地标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin --tags</div></pre></td></tr></table></figure><h4 id="删除一个本地标签"><a href="#删除一个本地标签" class="headerlink" title="删除一个本地标签"></a>删除一个本地标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -d &lt;tagname&gt;</div></pre></td></tr></table></figure><h4 id="删除一个远程标签"><a href="#删除一个远程标签" class="headerlink" title="删除一个远程标签"></a>删除一个远程标签</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin :refs/tags/&lt;tagname&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;git命令学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Git笔记&quot;&gt;&lt;a href=&quot;#Git笔记&quot; class=&quot;headerlink&quot; title=&quot; Git笔记 &quot;&gt;&lt;/a&gt;&lt;p align=&quot;center&quot;&gt; Git笔记 &lt;/p&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://oo8jzybo8.bkt.clouddn.com/hello-github.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;GitHub介绍&quot;&gt;&lt;a href=&quot;#GitHub介绍&quot; class=&quot;headerlink&quot; title=&quot;GitHub介绍&quot;&gt;&lt;/a&gt;GitHub介绍&lt;/h2&gt;&lt;p&gt;GitHub 是为开发者提供 Git 仓库的托管服务。这是一个让开发者与朋友、同事、同学及陌生人共享代码的完美场所。总结一下，GitHub 最大的特征是“面向人”&lt;/p&gt;
&lt;p&gt;Git是一个“&lt;strong&gt;分布式版本管理工具&lt;/strong&gt;”，简单的理解版本管理工具：大家在写东西的时候都用过“回撤”这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用“回撤”是找不回来的。而“&lt;strong&gt;版本管理工具&lt;/strong&gt;”能记录每次的修改，只要提交到版本仓库，你就可以找到之前任何时刻的状态（文本状态）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;统一概念&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作区：改动（增删文件和内容）&lt;/li&gt;
&lt;li&gt;暂存区：输入命令：&lt;code&gt;git add 改动的文件名&lt;/code&gt;，此次改动就放到了‘暂存区’&lt;/li&gt;
&lt;li&gt;本地仓库(简称：本地)：输入命令：&lt;code&gt;git commit 此次修改的描述&lt;/code&gt;，此次改动就放到了’本地仓库’，每个commit，我叫它为一个‘版本’。&lt;/li&gt;
&lt;li&gt;远程仓库(简称：远程)：输入命令：&lt;code&gt;git push 远程仓库&lt;/code&gt;，此次改动就放到了‘远程仓库’（GitHub等)&lt;/li&gt;
&lt;li&gt;分支：Git鼓励你使用&lt;code&gt;branch&lt;/code&gt;完成某个任务，合并后再删掉分支，过程更安全。&lt;/li&gt;
&lt;li&gt;commit-id：输出命令：&lt;code&gt;git log&lt;/code&gt;，最上面那行&lt;code&gt;commit xxxxxx&lt;/code&gt;，后面的字符串就是commit-id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考&lt;a href=&quot;https://github.com/git-tips/tips&quot;&gt;tips&lt;/a&gt;项目,和廖雪峰老师的&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git网站&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://github.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://github.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://github.com/2018/04/12/Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://github.com/2018/04/12/Markdown语法/</id>
    <published>2018-04-12T02:39:01.000Z</published>
    <updated>2018-04-12T03:29:16.648Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>针对中文,演示Markdown的语法</p></blockquote><h1 id="大标题"><a href="#大标题" class="headerlink" title="大标题"></a>大标题</h1><p>  大标题一般显示工程名，类似html的h1<br><br>  你只要在标题下面跟上=====即可（超过3个=即可，长度不限）<br><br>  或者你可以在标题前面加一个 # 来实现（# 大标题）</p><a id="more"></a><h2 id="中标题"><a href="#中标题" class="headerlink" title="中标题"></a>中标题</h2><p>  中标题一般显示重点项，类似html的h2<br><br>  你只要在标题下面输入—–即可（超过3个-即可，长度不限）<br><br>  或者你可以在标题前面加两个 # 来实现（## 中标题）</p><h3 id="小标题"><a href="#小标题" class="headerlink" title="小标题"></a>小标题</h3><p>  小标题类似html的h3<br><br>  你只要在标题前面加三个 # 即可（### 小标题）<br><br>  <strong>注意，下面所有语法的提示我都先用小标题提醒了！</strong></p><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p>  四、五、六级标题类似html的h4、h5、h6<br><br>  由前面类推，你只要在标题前面加四个、五个、六个 # 来实现<br></p><h3 id="水平标尺"><a href="#水平标尺" class="headerlink" title="水平标尺"></a>水平标尺</h3><hr><p>  你只要在一个空行画上—–即可（超过3个-即可，长度不限）<br><br>  但注意，前一行不能有纯文字，否者会当作中标题处理！</p><h3 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h3><pre><code>这是一个有多行的文本框常用来在这里写入代码只要每行文字前面输入一个Tab（或四个空格）再输入文字，即可实现效果</code></pre><p>  比如我们可以在多行文本框里输入一段代码,来一个C++版本的HelloWorld吧</p><pre><code>#include &lt;iostream&gt;using namespace std;int main(){    cout&lt;&lt;&quot;HelloWorld!&quot;&lt;&lt;endl;    return 0;}</code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>  书写示例：</p><p>  <br>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代码区域的上下分别用三个 ` 括起来</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="comment">// 代码缩进请使用 四个空格，不要使用 Tab</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>  </p><p>  效果：</p>  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代码区域的上下分别用三个 ` 括起来</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="comment">// 代码缩进请使用 四个空格，不要使用 Tab</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>1.<a href="http://www.google.com" target="_blank" rel="external">点击这里你可以链接到Google</a><br><br>2.<a href="https://github.com/KingJamesYF">点击这里我你可以链接到我的GitHub</a><br><br>链接插入的格式是：[链接的显示文字](链接URL)</p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><img src="https://avatars0.githubusercontent.com/u/9555093?v=3&amp;s=256" alt="github" title="我的GitHub头像"><br><br>图片插入的格式是：![图像替代文本](图片URL “图片说明文字”)</p><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>比如我想点击GitHub的图片，然后再进入GitHub首页<br><br><a href="http://www.github.com/" target="_blank" rel="external"><img src="https://github.com/images/modules/dashboard/bootcamp/octocat_setup.png" alt="image" title="GitHub"></a><br><br>图片链接插入的格式是：![[图像替代文本](图片URL “图片说明文字”)](链接URL)</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote><p>段落前面用竖线来框定要引用的文字<br><br>只要再文字前面加上&gt; 即可<br><br>但&gt; 只能放在行首才有效<br></p></blockquote><h3 id="多重引用"><a href="#多重引用" class="headerlink" title="多重引用"></a>多重引用</h3><blockquote><p>段落前面用竖线来框定要引用的文字<br></p><blockquote><p>只要再文字前面加上&gt; 即可<br></p><blockquote><p>但&gt; 只能放在行首才有效<br></p></blockquote></blockquote></blockquote><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>在行首加点</li><li>行首输入*</li><li>再空格，输入内容即可</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li>在行首加数字标号</li><li>行首输入数字和一个点（2.）</li><li>再空格，输入内容即可</li></ol><h3 id="二级列表（不带序号）"><a href="#二级列表（不带序号）" class="headerlink" title="二级列表（不带序号）"></a>二级列表（不带序号）</h3><p>书写示例：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> 列表 <span class="number">1</span>（一级列表：减号 + 空格）</span></div><div class="line"><span class="ruby">    - 列表 <span class="number">1.1</span>（二级列表：四个空格 + 减号 + 空格）</span></div><div class="line"><span class="ruby">    - 列表 <span class="number">1.2</span></span></div><div class="line"><span class="ruby">- 列表 <span class="number">2</span></span></div></pre></td></tr></table></figure><p>效果：</p><ul><li>列表 1（一级列表：减号 + 空格）   <ul><li>列表 1.1（二级列表：四个空格 + 减号 + 空格）   </li><li>列表 1.2   </li></ul></li><li>列表 2</li></ul><h3 id="二级列表（带序号）"><a href="#二级列表（带序号）" class="headerlink" title="二级列表（带序号）"></a>二级列表（带序号）</h3><p>书写示例：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby"> 列表（一级列表：减号 + 空格）</span></div><div class="line"><span class="ruby">    <span class="number">1</span>. 列表（二级列表：四个空格 + 序号 + 点 + 空格）</span></div><div class="line"><span class="ruby">    <span class="number">2</span>. 列表</span></div><div class="line"><span class="ruby">- 列表 <span class="number">2</span></span></div></pre></td></tr></table></figure><p>效果：</p><ul><li>列表 1（一级列表：减号 + 空格）  <ol><li>列表（二级列表：四个空格 + 自然数 + 点 + 空格）  </li><li>列表</li></ol></li><li>列表 2</li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul><li><em>斜体</em>只需要在要加斜体的文字前后各加上一个*号即可（*要加斜体的文字*）</li><li><strong>粗体</strong>只需要在要加粗体的文字前后各加上两个*号即可（**要加粗体的文字**）</li></ul><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>有一些特殊字符如&lt;,#等,只要在特殊字符前面加上转义字符\即可<br><br>你想换行的话其实可以直接用html标签\<br \=""></p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>书写示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">我是第一行（后面有两个空格）  </div><div class="line">我是第二行</div></pre></td></tr></table></figure><p>效果：  </p><p>我是第一行（后面有两个空格）<br>我是第二行</p><h3 id="标亮"><a href="#标亮" class="headerlink" title="标亮"></a>标亮</h3><p>书写示例：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`请把我标亮`</div></pre></td></tr></table></figure><p>效果：  </p><p><code>请把我标亮</code></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>书写示例：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">|<span class="string">Prefix  </span>|<span class="string">Framework   </span>|</div><div class="line">|<span class="string">--------</span>|<span class="string">------------</span>|</div><div class="line">|<span class="string">NS      </span>|<span class="string">Foundation (OS X and iOS) and Application Kit (OS X)  </span>|</div><div class="line">|<span class="string">UI      </span>|<span class="string">UIKit (iOS)  </span>|</div><div class="line">|<span class="string">AB      </span>|<span class="string">Address Book  </span>|</div><div class="line">|<span class="string">CA      </span>|<span class="string">Core Animation  </span>|</div><div class="line">|<span class="string">CI      </span>|<span class="string">Core Image  </span>|</div></pre></td></tr></table></figure><p>效果：</p><table><thead><tr><th>Prefix</th><th>Framework</th></tr></thead><tbody><tr><td>NS</td><td>Foundation (OS X and iOS) and Application Kit (OS X)</td></tr><tr><td>UI</td><td>UIKit (iOS)</td></tr><tr><td>AB</td><td>Address Book</td></tr><tr><td>CA</td><td>Core Animation</td></tr><tr><td>CI</td><td>Core Image</td></tr></tbody></table><h2 id="免费编辑器"><a href="#免费编辑器" class="headerlink" title="免费编辑器"></a>免费编辑器</h2><h3 id="Windows-平台"><a href="#Windows-平台" class="headerlink" title="Windows 平台"></a>Windows 平台</h3><p>MarkdownPad<br><a href="http://markdownpad.com" target="_blank" rel="external">http://markdownpad.com</a></p><h3 id="Mac-平台"><a href="#Mac-平台" class="headerlink" title="Mac 平台"></a>Mac 平台</h3><p>MacDown<br><a href="http://macdown.uranusjr.com/" target="_blank" rel="external">http://macdown.uranusjr.com/</a>   </p><blockquote><p>注：<br>不推荐 <a href="http://25.io/mou" target="_blank" rel="external">Mou</a>，原因 <code>文件大了超级卡</code>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;针对中文,演示Markdown的语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;大标题&quot;&gt;&lt;a href=&quot;#大标题&quot; class=&quot;headerlink&quot; title=&quot;大标题&quot;&gt;&lt;/a&gt;大标题&lt;/h1&gt;&lt;p&gt;  大标题一般显示工程名，类似html的h1&lt;br&gt;&lt;br&gt;  你只要在标题下面跟上=====即可（超过3个=即可，长度不限）&lt;br&gt;&lt;br&gt;  或者你可以在标题前面加一个 # 来实现（# 大标题）&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://github.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Markdown" scheme="http://github.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>【machine Learning】机器学习-1</title>
    <link href="http://github.com/2018/04/11/%E3%80%90machine%20Learning%E3%80%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-1/"/>
    <id>http://github.com/2018/04/11/【machine Learning】机器学习-1/</id>
    <published>2018-04-11T08:00:08.000Z</published>
    <updated>2018-04-12T16:52:41.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="科学算法库的安装-linux"><a href="#科学算法库的安装-linux" class="headerlink" title="科学算法库的安装(linux)"></a>科学算法库的安装(linux)</h1><ul><li>1.安装Numpy<pre><code>sudo apt-get install python-numpy</code></pre></li><li>2.安装Scipy<pre><code>sudo apt-get install python-numpy</code></pre></li><li>3.Matplotlib<pre><code>sudo apt-get install tk-devsudo apt-get install python-gtk2-devsudo apt-get install python-pyside</code></pre></li><li>4.spyder GUI环境<pre><code>sudo apt-get install spyder</code></pre></li></ul><p><br><br><a id="more"></a></p><ul><li><p><strong>上述安装完毕后，可以利用</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/python</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">x = np.linspace(<span class="number">0</span>,<span class="number">4</span>*<span class="number">3.1415</span>,<span class="number">100</span>)</div><div class="line">y = np.sin(x)</div><div class="line"></div><div class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">4</span>))</div><div class="line">plt.plot(x,y,label=<span class="string">"$sin(x)$"</span>,color=<span class="string">"red"</span>,linewidth=<span class="number">2</span>)</div><div class="line">plt.legend()</div><div class="line">plt.show()</div></pre></td></tr></table></figure><p><strong>进行测试。若生成正弦曲线窗口，则配置完成. </strong></p></li></ul><h1 id="NumPy的基本操作"><a href="#NumPy的基本操作" class="headerlink" title="NumPy的基本操作"></a>NumPy的基本操作</h1><ul><li><h2 id="Numpy-的导入"><a href="#Numpy-的导入" class="headerlink" title="Numpy 的导入"></a>Numpy 的导入</h2><pre><code>import numpy as np</code></pre><p>  这种写法在使用相关函数的时候需要写明是哪个包的，如:</p><pre><code>myZero = np.zeros([3,5])</code></pre><p>  还可以导入包全局使用</p><pre><code>from numpy import *</code></pre></li></ul><ul><li><h2 id="NumPy-的基本操作"><a href="#NumPy-的基本操作" class="headerlink" title="NumPy 的基本操作"></a>NumPy 的基本操作</h2><ol><li><p>创建全0矩阵和全1矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">myZero = zeros([n,m])</div><div class="line">myOne = ones([n,m])</div></pre></td></tr></table></figure></li><li><p>生成随机矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myRand = random.rand(n,m)   <span class="comment"># n 行 m 列的 0～1 之间的随机数矩阵</span></div></pre></td></tr></table></figure></li><li><p>生成单位矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myEye = eye(n)   <span class="comment"># n * n 的单位阵</span></div></pre></td></tr></table></figure></li><li><p>将一个数组转化为一个矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myMatrix = mat([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</div></pre></td></tr></table></figure></li><li><p>矩阵所有元素求和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">S = sum(myMatrix)</div></pre></td></tr></table></figure></li><li><p>矩阵各元素的乘积</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">matrix = multiply(matrix1, matrix2) <span class="comment"># matrix1 和 matrix2 对应元素相乘的矩阵</span></div></pre></td></tr></table></figure></li><li><p>求矩阵的 n 次幂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">matrix = power(myMatrix, n) <span class="comment">#生成一个矩阵，矩阵内部的元素是原矩阵对应元素的n次幂</span></div></pre></td></tr></table></figure></li><li><p>矩阵的转置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> matrix.T   <span class="comment">#打印转置后的矩阵，不改变原矩阵</span></div><div class="line">matrix.transpose()   <span class="comment">#同上</span></div></pre></td></tr></table></figure></li><li><p>矩阵的其他操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[m, n] = shape(matrix) <span class="comment"># m, n为矩阵的行列数</span></div><div class="line">myscl1 = matrix[<span class="number">0</span>] <span class="comment"># 矩阵的切片操作，取第一行</span></div><div class="line">myscl2 = matrix.T[<span class="number">0</span>] <span class="comment"># 矩阵的切片操作，取第一列</span></div><div class="line">mycpmat = matrix.copy() <span class="comment"># 矩阵的复制</span></div><div class="line"><span class="keyword">print</span> matrix1 &lt; matrix2 <span class="comment"># 矩阵的比较，会逐一比较对应的每一个元素，并输出一个仅包含True, False 的相同大小的矩阵</span></div><div class="line">dot(m1,m2)  <span class="comment">#计算m1,m2的点积</span></div><div class="line">norm(v)  <span class="comment">#计算向量V的范数</span></div></pre></td></tr></table></figure></li></ol></li><li><h2 id="Linalg线性代数库"><a href="#Linalg线性代数库" class="headerlink" title="Linalg线性代数库"></a>Linalg线性代数库</h2><ol><li><p>矩阵的行列式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> linalg.det(matrix)</div></pre></td></tr></table></figure></li><li><p>矩阵的逆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> linalg.inv(matrix)</div></pre></td></tr></table></figure></li><li><p>矩阵的对称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> matrix * matrix.T</div></pre></td></tr></table></figure></li><li><p>矩阵的秩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> linalg.matrix_rank(A)</div></pre></td></tr></table></figure></li><li><p>可逆矩阵求解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> linalg.solve(A,b.T) <span class="comment"># 如果b已经是一列的就不用转置了</span></div></pre></td></tr></table></figure></li></ol></li><li><h2 id="各类距离的python实现"><a href="#各类距离的python实现" class="headerlink" title="各类距离的python实现"></a>各类距离的python实现</h2><p>   <strong>各类距离会在后面说明</strong></p><ol><li><p>Euclidean Distance</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vector1 = mat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">vector2 = mat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</div><div class="line"><span class="keyword">print</span> sqrt((vector1-vector2)*(vector1-vector2).T)</div></pre></td></tr></table></figure></li><li><p>Manhattan Distance</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vector1 = mat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">vector2 = mat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</div><div class="line"><span class="keyword">print</span> sum(abs(vector1-vector2))</div></pre></td></tr></table></figure></li><li><p>Chebyshev Distance</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vector1 = mat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">vector2 = mat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</div><div class="line"><span class="keyword">print</span> abs(vector1-vector2).max()</div></pre></td></tr></table></figure></li><li><p>Cosine</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cosV12 = dot(vector1,vector2)/(linalg.norm(vector1)*linalg.norm(vector2))</div><div class="line"><span class="keyword">print</span> cosV12</div></pre></td></tr></table></figure></li><li><p>Hamming Distance</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">matV = mat([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]])</div><div class="line">smstr = nonzero(matV[<span class="number">0</span>] - matV[<span class="number">1</span>]);</div><div class="line"><span class="keyword">print</span> shape(smstr[<span class="number">0</span>])[<span class="number">1</span>]</div></pre></td></tr></table></figure></li><li><p>Jaccard Distance</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scipy.spatial.distance <span class="keyword">as</span> dist</div><div class="line">matV = mat([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]])</div><div class="line"><span class="keyword">print</span> dist.pdist(matV, <span class="string">'jaccard'</span>)</div></pre></td></tr></table></figure></li></ol></li></ul><h1 id="机器学习的数学基础"><a href="#机器学习的数学基础" class="headerlink" title="机器学习的数学基础"></a>机器学习的数学基础</h1><ul><li><strong>范数</strong><blockquote><p>向量的范数可以简单、形象的理解为<strong>向量的长度</strong>，或者向量到坐标系原点的距离，或者<strong>相应空间内的两点之间的距离</strong></p><p><strong><em>向量的范数定义</em></strong> : 向量的范数是一个函数 $ \parallel x\parallel $ ,满足非负性 $ \parallel x\parallel &gt; 0 $ , 齐次性 $ \parallel cx\parallel = \mid c\mid\parallel x\parallel $ ,三角不等式 $ \parallel x+y\parallel \leq\parallel x\parallel +\parallel y\parallel $ 。</p><p>L1范数：  $\parallel x\parallel $为 $ x $向量各个元素绝对值之和。<br>L2范数：  $\parallel x\parallel $为 $ x $向量各个元素平方和的开方，又称 Euclidean 范数或者 Frobenius 范数。<br>Lp范数：  $\parallel x\parallel $为 $ x $向量各个元素绝对值 $ p $次方和的  $ 1\over p $ 次方<br>L $\infty $范数：  $\parallel x\parallel $为 $ x $向量各个元素绝对值最大的那个元素，如下：$$ \lim_{k\to\infty}\left( \sum_{i=1}^n\mid p_i-q_i\mid ^k\right)^\frac{1}{k}<br>$$</p></blockquote></li><li><strong>Minkowski Distance (闵可夫斯基距离)</strong><blockquote><p>严格意义上讲，Minkowski Distance 不是一种距离，而是一组距离的定义。<br>两个n维向量 $ A(x_{11},x_{12},\cdots,x_{1n}) $ 与 $ B(x_{21},x_{22},\cdots,x_{2n}) $ 间的Minkowski距离定义为：<br>$$ d_{12}=\sqrt[p]{\sum_{k=1}^n(x_{1k}-x_{2k})^p} $$<br>其中p是一个变参数。</p><ul><li>当 p=1 时，就是 Manhattan Distance (曼哈顿距离)</li><li>当 p=2 时，就是 Euclidean Distance (欧氏距离)</li><li>当 $ p\to\infty $ 时，就是 Chebyshev Distance (切比雪夫距离)</li></ul></blockquote></li><li><strong>Euclideam Distance</strong><blockquote><p>欧氏距离（L2范数）是最易于理解的一种距离计算方法，源于欧氏空间的两点距离公式<br>两个n维向量 $ A(x_{11},x_{12},\cdots,x_{1n}) $ 与 $ B(x_{21},x_{22},\cdots,x_{2n}) $ 之间的欧氏距离：<br>$$ d_{12}=\sqrt{\sum_{k=1}^n(x_{1k}-x_{2k})^2} $$<br>表示为向量运算的形式：<br>$$ d_{12}=\sqrt{(A - B)(A - B)^T} $$</p></blockquote></li><li><strong>Manhattan Distance</strong><blockquote><p>曼哈顿距离（L1范数）可以理解为计算网格中两点路径的距离<br>二维平面两点 $ A(x_1,y_1) $ 和 $ B(x_2,y_2) $ 间的曼哈顿距离:<br>$$ d_{12}=\mid x_1-x_2\mid +\mid y_1-y_2\mid $$<br>两个n维向量 $ A(x_{11},x_{12},\cdots,x_{1n}) $ 与 $ B(x_{21},x_{22},\cdots,x_{2n}) $ 之间的曼哈顿距离：<br>$$ d_{12}=\sum_{k=1}^n\mid x_{1k}-x_{2k}\mid $$</p></blockquote></li><li><strong>Chebyshev Distance</strong><blockquote><p>切比雪夫距离类似与棋盘上国王从一点到另一点移动的最少次数，即 $ max(\mid x_1-x_2\mid,\mid y_1-y_2\mid) $<br>两个n维向量 $ A(x_{11},x_{12},\cdots,x_{1n}) $ 与 $ B(x_{21},x_{22},\cdots,x_{2n}) $ 之间的切比雪夫距离：<br>$$ d_{12}=max_i(\mid x_{1i}-x_{2i}\mid) $$<br>该公式的另一个等价公式：<br>$$ d_{12}=\lim_{k\to\infty}\left(\sum_{i=1}^n\mid x_{1i}-x_{2i}\mid^k\right)^\frac{1}{k} $$</p></blockquote></li><li><strong>Cosine</strong><blockquote><p>夹角余弦可以用来两个向量方向的差异，机器学习中借用这一概念来衡量样本之间的差异<br>两个n维向量 $ A(x_{11},x_{12},\cdots,x_{1n}) $ 与 $ B(x_{21},x_{22},\cdots,x_{2n}) $ 之间的夹角余弦：<br>$$ \cos\theta=\frac{AB}{\mid A\mid\mid B\mid} $$<br>即：<br>$$ \cos\theta=\frac{\sum_{k=1}^nx_{1k}x_{2k}}{\sqrt{\sum_{k=1}^nx_{1k}^2}\sqrt{\sum_{k=1}^nx_{2k}^2}} $$</p></blockquote></li><li><strong>Hamming Distance</strong><blockquote><p>汉明距离的定义：两个等长字符串s1,s2,将其中一个变成另一个需要的最小替换次数。<br>应用：信息编码（为了增强容错性，应使得编码间的最小汉明距离尽可能大）</p></blockquote></li><li><strong>Jaccard Similarity Coefficient(杰卡德相似系数)</strong><blockquote><p>杰卡德相似系数：两个集合A,B的交集元素在并集元素中所占的比例，用符号 $ J(A,B) $ 表示<br>$$ J(A,B)=\frac{\mid A\cap B\mid}{\mid A\cup B\mid} $$<br>杰卡德距：与杰卡德相似系数相反的概念：<br>$$ J_\delta(A,B)=1-J(A,B)=\frac{\mid A\cup B\mid-\mid A\cap B\mid}{\mid A\cup B\mid} $$</p></blockquote></li><li><p><strong>特征间的相关性</strong></p><blockquote><ol><li><p>相关系数与相关距离<br> 相关系数：<br> $$ \rho_{XY}=\frac{Cov(X,Y)}{\sqrt{D(X)}\sqrt{D(Y)}}=\frac{E((X-EX)(Y-EY))}{\sqrt{D(X)}\sqrt{D(Y)}} $$<br> 相关距离：<br> $$ D_{XY}=1-\rho_{XY} $$<br>python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">featuremat = mat(...)  <span class="comment"># 初始化矩阵</span></div><div class="line"><span class="comment"># 计算均值</span></div><div class="line">mv1 = mean(featuremat[<span class="number">0</span>])  <span class="comment"># 计算第一列的均值</span></div><div class="line">mv2 = mean(featuremat[<span class="number">1</span>])  <span class="comment"># 计算第二列的均值</span></div><div class="line"><span class="comment">#计算两列的标准差</span></div><div class="line">dv1 = std(featuremat[<span class="number">0</span>])</div><div class="line">dv2 = std(featuremat[<span class="number">1</span>])</div><div class="line">corref = mean(multiply(featuremat[<span class="number">0</span>]-mv1,featuremat[<span class="number">1</span>]-mv2))/(dv1*dv2)</div><div class="line"><span class="keyword">print</span> corref  <span class="comment">#输出相关系数</span></div><div class="line"><span class="keyword">print</span> corrcoef(featuremat)  <span class="comment">#输出相关系数矩阵</span></div></pre></td></tr></table></figure></li><li><p>马氏距离</p></li></ol></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;科学算法库的安装-linux&quot;&gt;&lt;a href=&quot;#科学算法库的安装-linux&quot; class=&quot;headerlink&quot; title=&quot;科学算法库的安装(linux)&quot;&gt;&lt;/a&gt;科学算法库的安装(linux)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.安装Numpy&lt;pre&gt;&lt;code&gt;sudo apt-get install python-numpy
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;2.安装Scipy&lt;pre&gt;&lt;code&gt;sudo apt-get install python-numpy
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;3.Matplotlib&lt;pre&gt;&lt;code&gt;sudo apt-get install tk-dev
sudo apt-get install python-gtk2-dev
sudo apt-get install python-pyside
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;4.spyder GUI环境&lt;pre&gt;&lt;code&gt;sudo apt-get install spyder
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://github.com/categories/Machine-Learning/"/>
    
    
      <category term="机器学习" scheme="http://github.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python" scheme="http://github.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>【Machine Learning】机器学习：简明入门指南</title>
    <link href="http://github.com/2017/10/11/%E3%80%90Machine%20Learning%E3%80%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%AE%80%E6%98%8E%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://github.com/2017/10/11/【Machine Learning】机器学习：简明入门指南/</id>
    <published>2017-10-11T08:00:08.000Z</published>
    <updated>2018-04-11T06:07:49.209Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是一篇转载自<a href="http://blog.jobbole.com/67616/" target="_blank" rel="external"><strong>伯乐在线的译文</strong></a>，英文原文是这里：<a href="https://medium.com/code-poet/80ea3ec3c471" target="_blank" rel="external"><strong>Machine Learning is Fun!</strong> — by Adam Geitgey</a></p></blockquote><p>在听到人们谈论机器学习的时候，你是不是对它的涵义只有几个模糊的认识呢？你是不是已经厌倦了在和同事交谈时只能一直点头？让我们改变一下吧！</p><p>本指南的读者对象是所有对机器学习有求知欲但却不知道如何开头的朋友。我猜很多人已经读过了<a href="https://en.wikipedia.org/wiki/Machine_learning" target="_blank" rel="external">“机器学习” ——维基百科词条</a>，倍感挫折，以为没人能给出一个高层次的解释。本文就是你们想要的东西。</p><p>本文目标在于平易近人，这意味着文中有大量的概括。但是谁在乎这些呢？只要能让读者对于ML更感兴趣，任务也就完成了。</p><a id="more"></a><h3 id="何为机器学习？"><a href="#何为机器学习？" class="headerlink" title="何为机器学习？"></a><strong>何为机器学习？</strong></h3><p>机器学习这个概念认为，对于待解问题，你无需编写任何专门的程序代码，遗传算法（generic algorithms）能够在数据集上为你得出有趣的答案。对于遗传算法，不用编码，而是将数据输入，它将在数据之上建立起它自己的逻辑。</p><p>举个例子，有一类算法称为分类算法，它可以将数据划分为不同的组别。一个用来识别手写数字的分类算法，不用修改一行代码，就可以用来将电子邮件分为垃圾邮件和普通邮件。算法没变，但是输入的训练数据变了，因此它得出了不同的分类逻辑。</p><p><img src="http://img.blog.csdn.net/20160814170910665" alt="机器学习算法是个黑盒，可以重用来解决很多不同的分类问题。"><br><em>机器学习算法是个黑盒，可以重用来解决很多不同的分类问题。</em></p><p>“机器学习”是一个涵盖性术语，覆盖了大量类似的遗传算法。</p><h3 id="两类机器学习算法"><a href="#两类机器学习算法" class="headerlink" title="两类机器学习算法"></a><strong>两类机器学习算法</strong></h3><p>你可以认为机器学习算法分为两大类：<strong>监督式学习</strong>（Supervised Learning）和<strong>非监督式学习</strong>（Unsupervised Learning）。两者区别很简单，但却非常重要。</p><h4 id="监督式学习"><a href="#监督式学习" class="headerlink" title="监督式学习"></a><strong>监督式学习</strong></h4><p>假设你是一名房产经纪，生意越做越大，因此你雇了一批实习生来帮你。但是问题来了——你可以看一眼房子就知道它到底值多少钱，实习生没有经验，不知道如何估价。</p><p>为了帮助你的实习生（也许是为了解放你自己去度个假），你决定写个小软件，可以根据房屋大小、地段以及类似房屋的成交价等因素来评估你所在地区房屋的价值。</p><p>你把3个月来城里每笔房屋交易都写了下来，每一单你都记录了一长串的细节——卧室数量、房屋大小、地段等等。但最重要的是，你写下了最终的成交价：</p><p>这是我们的“训练数据”:<br><img src="http://img.blog.csdn.net/20160814171156602" alt=""></p><p>我们要利用这些训练数据来编写一个程序来估算该地区其他房屋的价值：</p><p><img src="http://img.blog.csdn.net/20160814171239543" alt=""></p><p>这就称为<strong>监督式学习</strong>。你已经知道每一栋房屋的售价，换句话说，你知道问题的答案，并可以反向找出解题的逻辑。</p><p>为了编写软件，你将包含每一套房产的训练数据输入你的机器学习算法。算法尝试找出应该使用何种运算来得出价格数字。</p><p>这就像是算术练习题，算式中的运算符号都被擦去了：<br><img src="http://img.blog.csdn.net/20160814171313166" alt=""><br><em>天哪！一个阴险的学生将老师答案上的算术符号全擦去了。</em></p><p>看了这些题，你能明白这些测验里面是什么样的数学问题吗？你知道，你应该对算式左边的数字“做些什么”以得出算式右边的答案。</p><p>在监督式学习中，你是让计算机为你算出数字间的关系。而一旦你知道了解决这类特定问题所需要的数学方法后，你就可以解答同类的其它问题了。</p><h4 id="非监督式学习"><a href="#非监督式学习" class="headerlink" title="非监督式学习"></a><strong>非监督式学习</strong></h4><p>让我们回到开头那个房地产经纪的例子。要是你不知道每栋房子的售价怎么办？即使你所知道的只是房屋的大小、位置等信息，你也可以搞出很酷的花样。这就是所谓的非监督式学习。</p><p><img src="http://img.blog.csdn.net/20160814171439231" alt="即使你不是想去预测未知的数据（如价格），你也可以运用机器学习完成一些有意思的事。"><br><em>即使你不是想去预测未知的数据（如价格），你也可以运用机器学习完成一些有意思的事。</em></p><p>这就有点像有人给你一张纸，上面列出了很多数字，然后对你说:“我不知道这些数字有什么意义，也许你能从中找出规律或是能将它们分类，或是其它什么-祝你好运！”</p><p>你该怎么处理这些数据呢？首先，你可以用个算法自动地从数据中划分出不同的细分市场。也许你会发现大学附近的买房者喜欢户型小但卧室多的房子，而郊区的买房者偏好三卧室的大户型。这些信息可以直接帮助你的营销。</p><p>你还可以作件很酷的事，自动找出房价的离群数据，即与其它数据迥异的值。这些鹤立鸡群的房产也许是高楼大厦，而你可以将最优秀的推销员集中在这些地区，因为他们的佣金更高。</p><p>本文余下部分我们主要讨论监督式学习，但这并不是因为非监督式学习用处不大或是索然无味。实际上，随着算法改良，不用将数据和正确答案联系在一起，因此非监督式学习正变得越来越重要。</p><p>老学究请看:还有很多其它种类的机器学习算法。但初学时这样理解不错了。</p><h3 id="太酷了，但是评估房价真能被看作“学习”吗？"><a href="#太酷了，但是评估房价真能被看作“学习”吗？" class="headerlink" title="太酷了，但是评估房价真能被看作“学习”吗？"></a><strong>太酷了，但是评估房价真能被看作“学习”吗？</strong></h3><p>作为人类的一员，你的大脑可以应付绝大多数情况，并且没有任何明确指令也能够学习如何处理这些情况。如果你做房产经纪时间很长，你对于房产的合适定价、它的最佳营销方式以及哪些客户会感兴趣等等都会有一种本能般的“感觉”。强人工智能（Strong AI）研究的目标就是要能够用计算机复制这种能力。</p><p>但是目前的机器学习算法还没有那么好——它们只能专注于非常特定的、有限的问题。也许在这种情况下，“学习”更贴切的定义是“在少量范例数据的基础上找出一个等式来解决特定的问题”。</p><p>不幸的是，“机器在少量范例数据的基础上找出一个等式来解决特定的问题”这个名字太烂了。所以最后我们用“机器学习”取而代之。</p><p>当然，要是你是在50年之后来读这篇文章，那时我们已经得出了强人工智能算法，而本文看起来就像个老古董。未来的人类，你还是别读了，叫你的机器仆人给你做份三明治吧。</p><h3 id="让我们写代码吧"><a href="#让我们写代码吧" class="headerlink" title="让我们写代码吧!"></a><strong>让我们写代码吧!</strong></h3><p>前面例子中评估房价的程序，你打算怎么写呢？往下看之前，先思考一下吧。</p><p>如果你对机器学习一无所知，很有可能你会尝试写出一些基本规则来评估房价，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">estimate_house_sales_price</span><span class="params">(num_of_bedrooms, sqft, neighborhood)</span>:</span></div><div class="line">  price = <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="comment"># In my area, the average house costs $200 per sqft</span></div><div class="line">  price_per_sqft = <span class="number">200</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> neighborhood == <span class="string">"hipsterton"</span>:</div><div class="line">    <span class="comment"># but some areas cost a bit more</span></div><div class="line">    price_per_sqft = <span class="number">400</span></div><div class="line"></div><div class="line">  <span class="keyword">elif</span> neighborhood == <span class="string">"skid row"</span>:</div><div class="line">    <span class="comment"># and some areas cost less</span></div><div class="line">    price_per_sqft = <span class="number">100</span></div><div class="line"></div><div class="line">  <span class="comment"># start with a base price estimate based on how big the place is</span></div><div class="line">  price = price_per_sqft * sqft</div><div class="line"></div><div class="line">  <span class="comment"># now adjust our estimate based on the number of bedrooms</span></div><div class="line">  <span class="keyword">if</span> num_of_bedrooms == <span class="number">0</span>:</div><div class="line">    <span class="comment"># Studio apartments are cheap</span></div><div class="line">    price = price — <span class="number">20000</span></div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    <span class="comment"># places with more bedrooms are usually</span></div><div class="line">    <span class="comment"># more valuable</span></div><div class="line">    price = price + (num_of_bedrooms * <span class="number">1000</span>)</div><div class="line"></div><div class="line"> <span class="keyword">return</span> price</div></pre></td></tr></table></figure><p>假如你像这样瞎忙几个小时，也许会取得一点成效，但是你的程序永不会完美，而且当价格变化时很难维护。</p><p>如果能让计算机找出实现上述函数功能的办法，这样岂不更好？只要返回的房价数字正确，谁会在乎函数具体干了些什么呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">estimate_house_sales_price</span><span class="params">(num_of_bedrooms, sqft, neighborhood)</span>:</span></div><div class="line">  price = &lt;computer, plz do some math <span class="keyword">for</span> me&gt;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> price</div></pre></td></tr></table></figure><p>考虑这个问题的一种角度是将房价看做一碗美味的汤，而汤中成分就是卧室数、面积和地段。如果你能算出每种成分对最终的价格有多大影响，也许就能得到各种成分混合起来形成最终价格的具体比例。</p><p>这样可以将你最初的程序（全是疯狂的if else语句）简化成类似如下的样子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">estimate_house_sales_price</span><span class="params">(num_of_bedrooms, sqft, neighborhood)</span>:</span></div><div class="line"> price = <span class="number">0</span></div><div class="line"></div><div class="line"> <span class="comment"># a little pinch of this</span></div><div class="line"> price += num_of_bedrooms * <span class="number">.841231951398213</span></div><div class="line"></div><div class="line"> <span class="comment"># and a big pinch of that</span></div><div class="line"> price += sqft * <span class="number">1231.1231231</span></div><div class="line"></div><div class="line"> <span class="comment"># maybe a handful of this</span></div><div class="line"> price += neighborhood * <span class="number">2.3242341421</span></div><div class="line"></div><div class="line"> <span class="comment"># and finally, just a little extra salt for good measure</span></div><div class="line"> price += <span class="number">201.23432095</span></div><div class="line"></div><div class="line"> <span class="keyword">return</span> price</div></pre></td></tr></table></figure><p>请注意那些用粗体标注的神奇数字——<strong>.841231951398213</strong>, <strong>1231.1231231</strong>,<strong>2.3242341421</strong>, 和<strong>201.23432095</strong>。它们称为权重。如果我们能找出对每栋房子都适用的完美权重，我们的函数就能预测所有的房价！</p><p>找出最佳权重的一种笨办法如下所示：</p><h4 id="步骤1："><a href="#步骤1：" class="headerlink" title="步骤1："></a><strong>步骤1：</strong></h4><p>首先，将每个权重都设为1.0：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">estimate_house_sales_price</span><span class="params">(num_of_bedrooms, sqft, neighborhood)</span>:</span></div><div class="line">  price = <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="comment"># a little pinch of this</span></div><div class="line">  price += num_of_bedrooms * <span class="number">1.0</span></div><div class="line"></div><div class="line">  <span class="comment"># and a big pinch of that</span></div><div class="line">  price += sqft * <span class="number">1.0</span></div><div class="line"></div><div class="line">  <span class="comment"># maybe a handful of this</span></div><div class="line">  price += neighborhood * <span class="number">1.0</span></div><div class="line"></div><div class="line">  <span class="comment"># and finally, just a little extra salt for good measure</span></div><div class="line">  price += <span class="number">1.0</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> price</div></pre></td></tr></table></figure><h4 id="步骤2："><a href="#步骤2：" class="headerlink" title="步骤2："></a><strong>步骤2：</strong></h4><p>将每栋房产带入你的函数运算，检验估算值与正确价格的偏离程度：</p><p><img src="http://img.blog.csdn.net/20160814172040052" alt="运用你的程序预测房屋价格。"><br><em>运用你的程序预测房屋价格。</em></p><p>例如：上表中第一套房产实际成交价为25万美元，你的函数估价为17.8万，这一套房产你就差了7.2万。</p><p>再将你的数据集中的每套房产估价偏离值平方后求和。假设数据集中有500套房产交易，估价偏离值平方求和总计为86,123,373美元。这就反映了你的函数现在的“正确”程度。</p><p>现在，将总计值除以500，得到每套房产的估价偏离平均值。将这个平均误差值称为你函数的代价。</p><p>如果你能调整权重使得这个代价变为0，你的函数就完美了。它意味着，根据输入的数据，你的程序对每一笔房产交易的估价都是分毫不差。而这就是我们的目标——尝试不同的权重值以使代价尽可能的低。</p><h4 id="步骤3："><a href="#步骤3：" class="headerlink" title="步骤3："></a><strong>步骤3：</strong></h4><p>不断重复步骤2，尝试<strong>所有可能的权重值组合</strong>。哪一个组合使得代价最接近于0，它就是你要使用的，你只要找到了这样的组合，问题就得到了解决!</p><h3 id="思想扰动时间"><a href="#思想扰动时间" class="headerlink" title="思想扰动时间"></a><strong>思想扰动时间</strong></h3><p>这太简单了，对吧？想一想刚才你做了些什么。你取得了一些数据，将它们输入至三个通用的简单步骤中，最后你得到了一个可以对你所在区域的房屋进行估价的函数。房价网，要当心咯！<br>但是下面的事实可能会扰乱你的思想：</p><p>1.过去40年来，很多领域（如语言学/翻译学）的研究表明，这种通用的“搅动数据汤”（我编造的词）式的学习算法已经胜过了需要利用真人明确规则的方法。机器学习的“笨”办法最终打败了人类专家。</p><p>2.你最后写出的函数真是笨，它甚至不知道什么是“面积”和“卧室数”。它知道的只是搅动，改变数字来得到正确的答案。</p><p>3.很可能你都不知道为何一组特殊的权重值能起效。所以你只是写出了一个你实际上并不理解却能证明的函数。</p><p>4.试想一下，你的程序里没有类似“面积”和“卧室数”这样的参数，而是接受了一组数字。假设每个数字代表了你车顶安装的摄像头捕捉的画面中的一个像素，再将预测的输出不称为“价格”而是叫做“方向盘转动度数”，这样你就得到了一个程序可以自动操纵你的汽车了！</p><p>太疯狂了，对吧？</p><h3 id="步骤3中的“尝试每个数字”怎么回事？"><a href="#步骤3中的“尝试每个数字”怎么回事？" class="headerlink" title="步骤3中的“尝试每个数字”怎么回事？"></a><strong>步骤3中的“尝试每个数字”怎么回事？</strong></h3><p>好吧，当然你不可能尝试所有可能的权重值来找到效果最好的组合。那可真要花很长时间，因为要尝试的数字可能无穷无尽。</p><p>为避免这种情况，数学家们找到了很多聪明的办法（比如<a href="https://en.wikipedia.org/wiki/Gradient_descent" target="_blank" rel="external"><strong>Gradient descent算法</strong></a>）来快速找到优秀的权重值，而不需要尝试过多。下面是其中一种：</p><p>首先，写出一个简单的等式表示前述步骤2，这是你的代价函数：</p><p><img src="http://img.blog.csdn.net/20160814172434798" alt=""></p><p>接着，让我们将这同一个等式用机器学习的数学术语（现在你可以忽略它们）进行重写：</p><p><img src="http://img.blog.csdn.net/20160814172527111" alt=""><br><em>θ表示当前的权重值。 J(θ) 意为“当前权重值对应的代价”。</em></p><p>这个等式表示我们的估价程序在当前权重值下偏离程度的大小。<br>如果将所有赋给卧室数和面积的可能权重值以图形形式显示，我们会得到类似下图的图表：</p><p><img src="http://img.blog.csdn.net/20160814172601908" alt=""><br><em>代价函数的图形像一支碗。纵轴表示代价。</em></p><p>图中蓝色的最低点就是代价最低的地方——即我们的程序偏离最小。最高点意味着偏离最大。所以，如果我们能找到一组权重值带领我们到达图中的最低点，我们就找到了答案！</p><p><img src="http://img.blog.csdn.net/20160814172634361" alt=""></p><p>因此，我们只需要调整权重值使我们在图上能向着最低点“走下坡路”。如果对于权重的细小调节能一直使我们保持向最低点移动，那么最终我们不用尝试太多权重值就能到达那里。</p><p>如果你还记得一点微积分的话，你也许记得如果你对一个函数求导，结果会告诉你函数在任一点的斜率。换句话说，对于图上给定一点，它告诉我们那条路是下坡路。我们可以利用这一点朝底部进发。</p><p>所以，如果我们对代价函数关于每一个权重求偏导，那么我们就可以从每一个权重中减去该值。这样可以让我们更加接近山底。一直这样做，最终我们将到达底部，得到权重的最优值。（读不懂？不用担心，接着往下读）。</p><p>这种找出最佳权重的办法被称为<strong>批量梯度下降</strong>，上面是对它的高度概括。如果想搞懂细节，不要害怕，继续深入下去吧。</p><p>当你使用机器学习算法库来解决实际问题，所有这些都已经为你准备好了。但明白一些具体细节总是有用的。</p><h3 id="还有什么你随便就略过了？"><a href="#还有什么你随便就略过了？" class="headerlink" title="还有什么你随便就略过了？"></a><strong>还有什么你随便就略过了？</strong></h3><p>上面我描述的三步算法被称为<strong>多元线性回归</strong>。你估算等式是在求一条能够拟合所有房价数据点的直线。然后，你再根据房价在你的直线上可能出现的位置用这个等式来估算从未见过的房屋的价格。这个想法威力强大，可以用它来解决“实际”问题。</p><p>但是，我为你展示的这种方法可能在简单的情况下有效，它不会在所有情况下都有用。原因之一是因为房价不会一直那么简单地跟随一条连续直线。</p><p>但是，幸运的是，有很多办法来处理这种情况。对于非线性数据，很多其他类型的机器学习算法可以处理（如神经网络或有核向量机）。还有很多方法运用线性回归更灵活，想到了用更复杂的线条来拟合。在所有的情况中，寻找最优权重值这一基本思路依然适用。</p><p>还有，我忽略了<strong>过拟合</strong>的概念。很容易碰上这样一组权重值，它们对于你原始数据集中的房价都能完美预测，但对于原始数据集之外的任何新房屋都预测不准。这种情况的解决之道也有不少（如正则化以及使用交叉验证数据集）。学会如何处理这一问题对于顺利应用机器学习至关重要。</p><p>换言之，基本概念非常简单，要想运用机器学习得到有用的结果还需要一些技巧和经验。但是，这是每个开发者都能学会的技巧。</p><h3 id="机器学习法力无边吗？"><a href="#机器学习法力无边吗？" class="headerlink" title="机器学习法力无边吗？"></a><strong>机器学习法力无边吗？</strong></h3><p>一旦你开始明白机器学习技术很容易应用于解决貌似很困难的问题（如手写识别），你心中会有一种感觉，只要有足够的数据，你就能够用机器学习解决任何问题。只需要将数据输入进去，就能看到计算机变戏法一样找出拟合数据的等式。</p><p>但是很重要的一点你要记住，机器学习只能对用你占有的数据实际可解的问题才适用。</p><p>例如，如果你建立了一个模型来根据每套房屋内盆栽数量来预测房价，它就永远不会成功。房屋内盆栽数量和房价之间没有任何的关系。所以，无论它怎么去尝试，计算机也推导不出两者之间的关系。</p><p><img src="http://img.blog.csdn.net/20160814172839065" alt=""><br><em>你只能对实际存在的关系建模。</em></p><h3 id="怎样深入学习机器学习"><a href="#怎样深入学习机器学习" class="headerlink" title="怎样深入学习机器学习"></a><strong>怎样深入学习机器学习</strong></h3><p>我认为，当前机器学习的最大问题是它主要活跃于学术界和商业研究组织中。对于圈外想要有个大体了解而不是想成为专家的人们，简单易懂的学习资料不多。但是这一情况每一天都在改善。</p><p>吴恩达教授（Andrew Ng）在<a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="external"><strong>Coursera上的机器学习免费课程</strong></a>非常不错。我强烈建议由此入门。任何拥有计算机科学学位、还能记住一点点数学的人应该都能理解。</p><p>另外，你还可以下载安装<a href="http://scikit-learn.org/stable/" target="_blank" rel="external"><code>SciKit-Learn</code></a>，用它来试验成千上万的机器学习算法。它是一个python框架，对于所有的标准算法都有“黑盒”版本。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是一篇转载自&lt;a href=&quot;http://blog.jobbole.com/67616/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;伯乐在线的译文&lt;/strong&gt;&lt;/a&gt;，英文原文是这里：&lt;a href=&quot;https://medium.com/code-poet/80ea3ec3c471&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;Machine Learning is Fun!&lt;/strong&gt; — by Adam Geitgey&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在听到人们谈论机器学习的时候，你是不是对它的涵义只有几个模糊的认识呢？你是不是已经厌倦了在和同事交谈时只能一直点头？让我们改变一下吧！&lt;/p&gt;
&lt;p&gt;本指南的读者对象是所有对机器学习有求知欲但却不知道如何开头的朋友。我猜很多人已经读过了&lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_learning&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“机器学习” ——维基百科词条&lt;/a&gt;，倍感挫折，以为没人能给出一个高层次的解释。本文就是你们想要的东西。&lt;/p&gt;
&lt;p&gt;本文目标在于平易近人，这意味着文中有大量的概括。但是谁在乎这些呢？只要能让读者对于ML更感兴趣，任务也就完成了。&lt;/p&gt;
    
    </summary>
    
      <category term="Machine Learning" scheme="http://github.com/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="http://github.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇文章</title>
    <link href="http://github.com/2017/09/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://github.com/2017/09/22/我的第一篇文章/</id>
    <published>2017-09-22T12:14:15.000Z</published>
    <updated>2017-09-24T14:49:41.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的第一次博客"><a href="#我的第一次博客" class="headerlink" title="我的第一次博客"></a>我的第一次博客</h1><p><img src="https://itimetraveler.github.io/hexo-theme-hiker/gallery/shoes.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我的第一次博客&quot;&gt;&lt;a href=&quot;#我的第一次博客&quot; class=&quot;headerlink&quot; title=&quot;我的第一次博客&quot;&gt;&lt;/a&gt;我的第一次博客&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://itimetraveler.github.io/hexo-the
      
    
    </summary>
    
      <category term="技术" scheme="http://github.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://github.com/categories/%E6%8A%80%E6%9C%AF/javascript/"/>
    
    
      <category term="前端" scheme="http://github.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="后端" scheme="http://github.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://github.com/2017/09/22/hello-world/"/>
    <id>http://github.com/2017/09/22/hello-world/</id>
    <published>2017-09-22T11:48:15.570Z</published>
    <updated>2018-04-12T03:30:36.790Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
